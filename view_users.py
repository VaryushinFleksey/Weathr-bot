import sqlite3
import json
from datetime import datetime

DB_FILE = 'weather_bot.db'

def format_user_preferences(row):
    if not row:
        return "–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫"
    
    notification_time = row[1] or "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    temp_min = row[2] if row[2] is not None else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    temp_max = row[3] if row[3] is not None else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    wind_threshold = row[4] if row[4] is not None else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    rain_alerts = "–í–∫–ª—é—á–µ–Ω—ã" if row[5] else "–í—ã–∫–ª—é—á–µ–Ω—ã"
    activities = json.loads(row[6]) if row[6] else []
    
    return f"""
    üïí –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notification_time}
    üå° –î–∏–∞–ø–∞–∑–æ–Ω —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä: {temp_min}¬∞C - {temp_max}¬∞C
    üí® –ü–æ—Ä–æ–≥ –≤–µ—Ç—Ä–∞: {wind_threshold} –º/—Å
    üåß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–∂–¥–µ: {rain_alerts}
    üéØ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {', '.join(activities) if activities else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
    """

try:
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö –¥–∞–Ω–Ω—ã–º–∏
    cursor.execute("""
        SELECT 
            u.*,
            GROUP_CONCAT(DISTINCT s.city) as subscribed_cities,
            p.notification_time,
            p.temp_min,
            p.temp_max,
            p.wind_threshold,
            p.rain_alerts,
            p.activities
        FROM users u
        LEFT JOIN subscriptions s ON u.user_id = s.user_id
        LEFT JOIN user_preferences p ON u.user_id = p.user_id
        GROUP BY u.user_id
    """)
    users = cursor.fetchall()
    
    if not users:
        print("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    else:
        print(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n")
        for user in users:
            user_id = user[0]
            username = user[1] or "–ù–µ —É–∫–∞–∑–∞–Ω"
            first_name = user[2] or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            last_name = user[3] or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            language_code = user[4] or "–ù–µ —É–∫–∞–∑–∞–Ω"
            is_premium = "–î–∞" if user[5] else "–ù–µ—Ç"
            joined_at = user[6]
            cities = user[7].split(',') if user[7] else []
            preferences = user[8:]
            
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}")
            print(f"üìù –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{username}")
            print(f"üë® –ò–º—è: {first_name}")
            print(f"üë® –§–∞–º–∏–ª–∏—è: {last_name}")
            print(f"üåê –Ø–∑—ã–∫: {language_code}")
            print(f"‚≠ê Premium: {is_premium}")
            print(f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {joined_at}")
            print(f"üåÜ –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≥–æ—Ä–æ–¥–∞: {', '.join(cities) if cities else '–ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫'}")
            print("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", format_user_preferences(preferences))
            print("-" * 50)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏)
    cursor.execute("""
        SELECT COUNT(DISTINCT user_id) 
        FROM subscriptions
    """)
    active_users = cursor.fetchone()[0]
    print(f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏): {active_users}")
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫
    cursor.execute("""
        SELECT COUNT(*) 
        FROM subscriptions
    """)
    total_subscriptions = cursor.fetchone()[0]
    print(f"üîî –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫: {total_subscriptions}")
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
    cursor.execute("""
        SELECT city, COUNT(*) as count 
        FROM subscriptions 
        GROUP BY city 
        ORDER BY count DESC 
        LIMIT 5
    """)
    popular_cities = cursor.fetchall()
    if popular_cities:
        print("\nüèÜ –¢–æ–ø-5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤:")
        for city, count in popular_cities:
            print(f"  ‚Ä¢ {city}: {count} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
    
except sqlite3.OperationalError as e:
    if "no such table" in str(e):
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –µ—â–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è.")
    else:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
except Exception as e:
    print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
finally:
    if 'conn' in locals():
        conn.close() 