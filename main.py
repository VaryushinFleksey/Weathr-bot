import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, BotCommand, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import requests
from dotenv import load_dotenv
import asyncio
from datetime import datetime
import pytz
import signal
import sys
from aiohttp import web  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç aiohttp
import aiohttp
import math  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç math

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º googlemaps
try:
    import googlemaps
    GOOGLE_MAPS_AVAILABLE = True
except ImportError:
    GOOGLE_MAPS_AVAILABLE = False

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# Get environment variables
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENWEATHER_API_KEY = os.getenv('OPENWEATHER_API_KEY')
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')

# Initialize bot and dispatcher
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# Initialize Google Maps client only if API key is available
gmaps = None
if GOOGLE_MAPS_AVAILABLE and GOOGLE_API_KEY:
    try:
        gmaps = googlemaps.Client(key=GOOGLE_API_KEY)
        logging.info("Google Maps API initialized successfully")
    except Exception as e:
        logging.warning(f"Failed to initialize Google Maps API: {e}")

# Bot commands for menu
COMMANDS = [
    BotCommand(command='start', description='–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
    BotCommand(command='help', description='–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å'),
    BotCommand(command='forecast', description='–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π'),
    BotCommand(command='detailed', description='–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ'),
    BotCommand(command='air', description='–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞'),
    BotCommand(command='compare', description='–°—Ä–∞–≤–Ω–∏—Ç—å –ø–æ–≥–æ–¥—É –≤ –¥–≤—É—Ö –≥–æ—Ä–æ–¥–∞—Ö'),
    BotCommand(command='alerts', description='–ü–æ–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è'),
    BotCommand(command='wear', description='–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–µ–∂–¥–µ'),
    BotCommand(command='rain', description='–ö–∞—Ä—Ç–∞ –æ—Å–∞–¥–∫–æ–≤')
]

def get_clothing_recommendations(weather_data):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–µ–∂–¥–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
    temp = weather_data['main']['temp']
    feels_like = weather_data['main']['feels_like']
    wind_speed = weather_data['wind']['speed']
    description = weather_data['weather'][0]['description'].lower()
    humidity = weather_data['main']['humidity']
    
    recommendations = []
    
    # –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
    if feels_like <= -20:
        recommendations.extend([
            "üß• –¢–µ–ø–ª—ã–π –∑–∏–º–Ω–∏–π –ø—É—Ö–æ–≤–∏–∫ –∏–ª–∏ —à—É–±–∞",
            "üß£ –¢–µ–ø–ª—ã–π —à–∞—Ä—Ñ",
            "üß§ –¢–µ–ø–ª—ã–µ –ø–µ—Ä—á–∞—Ç–∫–∏ –∏–ª–∏ –≤–∞—Ä–µ–∂–∫–∏",
            "üë¢ –ó–∏–º–Ω–∏–µ —É—Ç–µ–ø–ª–µ–Ω–Ω—ã–µ –±–æ—Ç–∏–Ω–∫–∏",
            "üß¶ –¢–µ–ø–ª—ã–µ –Ω–æ—Å–∫–∏, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —à–µ—Ä—Å—Ç—è–Ω—ã–µ",
            "üëñ –¢–µ–ø–ª—ã–µ –∑–∏–º–Ω–∏–µ –±—Ä—é–∫–∏ –∏–ª–∏ —Ç–µ—Ä–º–æ–±–µ–ª—å–µ"
        ])
    elif -20 < feels_like <= -10:
        recommendations.extend([
            "üß• –ó–∏–º–Ω—è—è –∫—É—Ä—Ç–∫–∞ –∏–ª–∏ –ø—É—Ö–æ–≤–∏–∫",
            "üß£ –®–∞—Ä—Ñ",
            "üß§ –ü–µ—Ä—á–∞—Ç–∫–∏",
            "üë¢ –ó–∏–º–Ω—è—è –æ–±—É–≤—å",
            "üß¶ –¢–µ–ø–ª—ã–µ –Ω–æ—Å–∫–∏"
        ])
    elif -10 < feels_like <= 0:
        recommendations.extend([
            "üß• –î–µ–º–∏—Å–µ–∑–æ–Ω–Ω–∞—è –∫—É—Ä—Ç–∫–∞ –∏–ª–∏ –ª–µ–≥–∫–∏–π –ø—É—Ö–æ–≤–∏–∫",
            "üß£ –õ–µ–≥–∫–∏–π —à–∞—Ä—Ñ",
            "üß§ –ü–µ—Ä—á–∞—Ç–∫–∏",
            "üëû –£—Ç–µ–ø–ª–µ–Ω–Ω–∞—è –æ–±—É–≤—å"
        ])
    elif 0 < feels_like <= 10:
        recommendations.extend([
            "üß• –õ–µ–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞ –∏–ª–∏ –ø–ª–∞—â",
            "üß• –°–≤–∏—Ç–µ—Ä –∏–ª–∏ –∫–æ—Ñ—Ç–∞",
            "üëû –ó–∞–∫—Ä—ã—Ç–∞—è –æ–±—É–≤—å"
        ])
    elif 10 < feels_like <= 20:
        recommendations.extend([
            "üëï –õ–µ–≥–∫–∞—è –∫–æ—Ñ—Ç–∞ –∏–ª–∏ —Ä—É–±–∞—à–∫–∞",
            "üëñ –ë—Ä—é–∫–∏ –∏–ª–∏ –¥–∂–∏–Ω—Å—ã",
            "üëü –õ–µ–≥–∫–∞—è –æ–±—É–≤—å"
        ])
    elif 20 < feels_like <= 25:
        recommendations.extend([
            "üëï –§—É—Ç–±–æ–ª–∫–∞ –∏–ª–∏ —Ä—É–±–∞—à–∫–∞ —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ä—É–∫–∞–≤–æ–º",
            "üëñ –õ–µ–≥–∫–∏–µ –±—Ä—é–∫–∏ –∏–ª–∏ —à–æ—Ä—Ç—ã",
            "üëü –õ–µ–≥–∫–∞—è –æ–±—É–≤—å –∏–ª–∏ —Å–∞–Ω–¥–∞–ª–∏–∏"
        ])
    else:  # > 25
        recommendations.extend([
            "üëï –õ–µ–≥–∫–∞—è –æ–¥–µ–∂–¥–∞ –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —Ç–∫–∞–Ω–µ–π",
            "ü©≥ –®–æ—Ä—Ç—ã –∏–ª–∏ –ª–µ–≥–∫–∞—è —é–±–∫–∞",
            "üë° –°–∞–Ω–¥–∞–ª–∏–∏ –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞—è –æ–±—É–≤—å"
        ])
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏–π
    if "–¥–æ–∂–¥—å" in description or "–ª–∏–≤–µ–Ω—å" in description:
        recommendations.extend([
            "‚òîÔ∏è –ó–æ–Ω—Ç",
            "üß• –í–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º–∞—è –∫—É—Ä—Ç–∫–∞ –∏–ª–∏ –ø–ª–∞—â",
            "üë¢ –ù–µ–ø—Ä–æ–º–æ–∫–∞–µ–º–∞—è –æ–±—É–≤—å"
        ])
    
    if "—Å–Ω–µ–≥" in description:
        recommendations.append("üë¢ –í–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º–∞—è –æ–±—É–≤—å —Å –Ω–µ—Å–∫–æ–ª—å–∑—è—â–µ–π –ø–æ–¥–æ—à–≤–æ–π")
    
    if wind_speed > 10:
        recommendations.append("üß• –í–µ—Ç—Ä–æ–∑–∞—â–∏—Ç–Ω–∞—è –∫—É—Ä—Ç–∫–∞ –∏–ª–∏ –ø–ª–∞—â")
    
    if humidity > 80 and temp > 20:
        recommendations.append("üëï –õ–µ–≥–∫–∞—è –¥—ã—à–∞—â–∞—è –æ–¥–µ–∂–¥–∞ –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —Ç–∫–∞–Ω–µ–π")
    
    if "—Å–æ–ª–Ω–µ—á–Ω–æ" in description or "—è—Å–Ω–æ" in description:
        if temp > 20:
            recommendations.extend([
                "üß¢ –ì–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä –æ—Ç —Å–æ–ª–Ω—Ü–∞",
                "üï∂ –°–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏"
            ])
    
    return recommendations

def lat_lon_to_tile(lat, lon, zoom):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –Ω–æ–º–µ—Ä–∞ —Ç–∞–π–ª–æ–≤"""
    lat_rad = math.radians(lat)
    n = 2.0 ** zoom
    xtile = int((lon + 180.0) / 360.0 * n)
    ytile = int((1.0 - math.asinh(math.tan(lat_rad)) / math.pi) / 2.0 * n)
    return xtile, ytile

async def get_precipitation_map(lat, lon, zoom=8):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ä—Ç—É –æ—Å–∞–¥–∫–æ–≤ –¥–ª—è –∑–∞–¥–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ç–∞–π–ª—ã
        xtile, ytile = lat_lon_to_tile(lat, lon, zoom)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∫–∞—Ä—Ç—ã –æ—Å–∞–¥–∫–æ–≤
        map_url = (
            f"https://tile.openweathermap.org/map/precipitation_new/{zoom}/{xtile}/{ytile}.png"
            f"?appid={OPENWEATHER_API_KEY}"
        )
        
        logging.info(f"Requesting precipitation map: {map_url}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞–π–ª–∞ –∏ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        async with aiohttp.ClientSession() as session:
            async with session.get(map_url) as response:
                if response.status == 200:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
                    content = await response.read()
                    if len(content) < 100:  # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è, –≤–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ –ø—É—Å—Ç–æ–π —Ç–∞–π–ª
                        logging.warning(f"Tile response too small: {len(content)} bytes")
                        # –ü–æ–ø—Ä–æ–±—É–µ–º —É–º–µ–Ω—å—à–∏—Ç—å –∑—É–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –æ–±—â–µ–π –∫–∞—Ä—Ç–∏–Ω—ã
                        if zoom > 4:
                            return await get_precipitation_map(lat, lon, zoom - 2)
                        return None
                    return map_url
                else:
                    logging.error(f"Failed to fetch tile: {response.status}, {await response.text()}")
                    return None
    except Exception as e:
        logging.error(f"Error fetching precipitation map: {e}")
        return None

def create_main_keyboard():
    """Create main keyboard with location button."""
    keyboard = [
        [{"text": "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", "request_location": True}],
        [{"text": "‚ÑπÔ∏è –ü–æ–º–æ—â—å"}]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def format_detailed_weather(weather_data, city_name):
    """Format detailed weather information."""
    # Basic weather info
    temp = weather_data['main']['temp']
    feels_like = weather_data['main']['feels_like']
    description = weather_data['weather'][0]['description']
    humidity = weather_data['main']['humidity']
    wind_speed = weather_data['wind']['speed']
    pressure = weather_data['main']['pressure']
    
    # Convert sunrise and sunset timestamps to datetime
    timezone_offset = weather_data['timezone']
    sunrise_time = datetime.fromtimestamp(weather_data['sys']['sunrise'] + timezone_offset).strftime('%H:%M')
    sunset_time = datetime.fromtimestamp(weather_data['sys']['sunset'] + timezone_offset).strftime('%H:%M')
    
    # Calculate wind direction
    wind_deg = weather_data.get('wind', {}).get('deg', 0)
    wind_directions = ['–°', '–°–í', '–í', '–Æ–í', '–Æ', '–Æ–ó', '–ó', '–°–ó']
    wind_direction = wind_directions[round(wind_deg / 45) % 8]
    
    # Visibility in kilometers
    visibility = weather_data.get('visibility', 0) / 1000
    
    # Clouds percentage
    clouds = weather_data['clouds']['all']
    
    return (
        f"üåç –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ –≤ –≥–æ—Ä–æ–¥–µ {city_name}:\n\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.1f}¬∞C\n"
        f"ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like:.1f}¬∞C\n"
        f"‚òÅÔ∏è –£—Å–ª–æ–≤–∏—è: {description}\n"
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
        f"üí® –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {wind_direction}\n"
        f"üåÖ –í–æ—Å—Ö–æ–¥: {sunrise_time}\n"
        f"üåá –ó–∞–∫–∞—Ç: {sunset_time}\n"
        f"üå° –î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –≥–ü–∞\n"
        f"üëÅ –í–∏–¥–∏–º–æ—Å—Ç—å: {visibility:.1f} –∫–º\n"
        f"‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {clouds}%"
    )

def check_weather_alerts(weather_data):
    """Check for dangerous weather conditions."""
    alerts = []
    
    # Check temperature
    temp = weather_data['main']['temp']
    if temp > 30:
        alerts.append("üå° –°–∏–ª—å–Ω–∞—è –∂–∞—Ä–∞! –ò–∑–±–µ–≥–∞–π—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –Ω–∞ —Å–æ–ª–Ω—Ü–µ")
    elif temp < -15:
        alerts.append("‚ùÑÔ∏è –°–∏–ª—å–Ω—ã–π –º–æ—Ä–æ–∑! –¢–µ–ø–ª–æ –æ–¥–µ–Ω—å—Ç–µ—Å—å")
    
    # Check wind
    wind_speed = weather_data['wind']['speed']
    if wind_speed > 15:
        alerts.append(f"üí® –°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä {wind_speed} –º/—Å! –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –Ω–∞ —É–ª–∏—Ü–µ")
    
    # Check rain/snow/thunderstorm
    if 'rain' in weather_data:
        rain = weather_data['rain'].get('1h', 0)
        if rain > 10:
            alerts.append("üåß –°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å! –í–æ–∑—å–º–∏—Ç–µ –∑–æ–Ω—Ç")
    if 'snow' in weather_data:
        snow = weather_data['snow'].get('1h', 0)
        if snow > 5:
            alerts.append("üå® –°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥! –í–æ–∑–º–æ–∂–Ω—ã –∑–∞–Ω–æ—Å—ã –Ω–∞ –¥–æ—Ä–æ–≥–∞—Ö")
    
    # Check visibility
    visibility = weather_data.get('visibility', 10000) / 1000  # convert to km
    if visibility < 1:
        alerts.append("üå´ –û—á–µ–Ω—å –ø–ª–æ—Ö–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å! –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã")
    
    # Check weather conditions
    weather_id = weather_data['weather'][0]['id']
    if weather_id in range(200, 300):  # Thunderstorm
        alerts.append("‚õà –ì—Ä–æ–∑–∞! –°–æ–±–ª—é–¥–∞–π—Ç–µ –º–µ—Ä—ã –ø—Ä–µ–¥–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏")
    
    return alerts

@dp.message(CommandStart())
async def start_command(message: Message):
    """Send a message when the command /start is issued."""
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã. üå§\n'
        '–Ø –º–æ–≥—É:\n'
        '1. –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É (–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥)\n'
        '2. –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π (/forecast –≥–æ—Ä–æ–¥)\n'
        '3. –ü–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ (/detailed –≥–æ—Ä–æ–¥)\n'
        '4. –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ (/air –≥–æ—Ä–æ–¥)\n'
        '5. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–≥–æ–¥—É –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏\n'
        '6. –°—Ä–∞–≤–Ω–∏—Ç—å –ø–æ–≥–æ–¥—É –≤ —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö (/compare)\n'
        '7. –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (/alerts –≥–æ—Ä–æ–¥)\n'
        '8. –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–µ–∂–¥–µ (/wear –≥–æ—Ä–æ–¥)\n'
        '9. –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –æ—Å–∞–¥–∫–æ–≤ (/rain –≥–æ—Ä–æ–¥)\n\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é!',
        reply_markup=create_main_keyboard()
    )

@dp.message(Command('help'))
async def help_command(message: Message):
    """Send a message when the command /help is issued."""
    await message.answer(
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n'
        '1. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã\n'
        '2. /forecast –ì–û–†–û–î - –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π\n'
        '3. /detailed –ì–û–†–û–î - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n'
        '4. /air –ì–û–†–û–î - –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞\n'
        '5. /compare - —Å—Ä–∞–≤–Ω–∏—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–∞—Ö\n'
        '6. /alerts –ì–û–†–û–î - –ø–æ–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\n'
        '7. /wear –ì–û–†–û–î - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–µ–∂–¥–µ\n'
        '8. /rain –ì–û–†–û–î - –∫–∞—Ä—Ç–∞ –æ—Å–∞–¥–∫–æ–≤\n'
        '9. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é" –¥–ª—è –ø–æ–≥–æ–¥—ã –≤ –≤–∞—à–µ–º –º–µ—Å—Ç–µ\n\n'
        '–ü—Ä–∏–º–µ—Ä—ã:\n'
        '- "–ú–æ—Å–∫–≤–∞" - —Ç–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞\n'
        '- "/forecast –ü–∞—Ä–∏–∂" - –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π\n'
        '- "/detailed –õ–æ–Ω–¥–æ–Ω" - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n'
        '- "/alerts –ú–æ—Å–∫–≤–∞" - –ø–æ–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è',
        reply_markup=create_main_keyboard()
    )

@dp.message(Command('detailed'))
async def detailed_command(message: Message):
    """Get detailed weather information for the specified city."""
    try:
        city = message.text.split(' ', 1)[1]
    except IndexError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /detailed –ú–æ—Å–∫–≤–∞"
        )
        return

    try:
        # Get coordinates first
        geo_url = f"http://api.openweathermap.org/geo/1.0/direct?q={city}&limit=1&appid={OPENWEATHER_API_KEY}"
        geo_response = requests.get(geo_url)
        geo_data = geo_response.json()
        
        if not geo_data:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
            return
            
        lat = geo_data[0]['lat']
        lon = geo_data[0]['lon']
        
        # Get detailed weather data
        weather_url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        weather_response = requests.get(weather_url)
        weather_data = weather_response.json()
        
        # Check for weather alerts
        alerts = check_weather_alerts(weather_data)
        
        # Format and send detailed weather information
        detailed_message = format_detailed_weather(weather_data, city)
        if alerts:
            detailed_message += "\n\n" + "\n".join(alerts)
        await message.answer(detailed_message)
        
    except Exception as e:
        logging.error(f"Error getting detailed weather: {e}")
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@dp.message(Command('air'))
async def air_quality_command(message: Message):
    """Get air quality information for the specified city."""
    try:
        city = message.text.split(' ', 1)[1]
    except IndexError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /air –ú–æ—Å–∫–≤–∞"
        )
        return

    try:
        # Get coordinates first
        geo_url = f"http://api.openweathermap.org/geo/1.0/direct?q={city}&limit=1&appid={OPENWEATHER_API_KEY}"
        geo_response = requests.get(geo_url)
        geo_data = geo_response.json()
        
        if not geo_data:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
            return
            
        lat = geo_data[0]['lat']
        lon = geo_data[0]['lon']
        
        # Get air quality data
        air_url = f"http://api.openweathermap.org/data/2.5/air_pollution?lat={lat}&lon={lon}&appid={OPENWEATHER_API_KEY}"
        air_response = requests.get(air_url)
        air_data = air_response.json()
        
        # AQI levels description
        aqi_levels = {
            1: "–û—Ç–ª–∏—á–Ω–æ–µ ",
            2: "–•–æ—Ä–æ—à–µ–µ üôÇ",
            3: "–£–º–µ—Ä–µ–Ω–Ω–æ–µ üòê",
            4: "–ü–ª–æ—Ö–æ–µ üò∑",
            5: "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ ü§¢"
        }
        
        aqi = air_data['list'][0]['main']['aqi']
        components = air_data['list'][0]['components']
        
        air_message = (
            f"üå¨ –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:\n\n"
            f"–û–±—â–∏–π –∏–Ω–¥–µ–∫—Å: {aqi_levels[aqi]}\n\n"
            f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:\n"
            f"CO (–£–≥–∞—Ä–Ω—ã–π –≥–∞–∑): {components['co']:.1f} –º–∫–≥/–º¬≥\n"
            f"NO (–û–∫—Å–∏–¥ –∞–∑–æ—Ç–∞): {components['no']:.1f} –º–∫–≥/–º¬≥\n"
            f"NO‚ÇÇ (–î–∏–æ–∫—Å–∏–¥ –∞–∑–æ—Ç–∞): {components['no2']:.1f} –º–∫–≥/–º¬≥\n"
            f"O‚ÇÉ (–û–∑–æ–Ω): {components['o3']:.1f} –º–∫–≥/–º¬≥\n"
            f"SO‚ÇÇ (–î–∏–æ–∫—Å–∏–¥ —Å–µ—Ä—ã): {components['so2']:.1f} –º–∫–≥/–º¬≥\n"
            f"PM2.5 (–ú–µ–ª–∫–∏–µ —á–∞—Å—Ç–∏—Ü—ã): {components['pm2_5']:.1f} –º–∫–≥/–º¬≥\n"
            f"PM10 (–ö—Ä—É–ø–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã): {components['pm10']:.1f} –º–∫–≥/–º¬≥"
        )
        
        await message.answer(air_message)
        
    except Exception as e:
        logging.error(f"Error getting air quality: {e}")
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@dp.message(lambda message: message.location is not None)
async def handle_location(message: Message):
    """Handle received location."""
    try:
        lat = message.location.latitude
        lon = message.location.longitude
        
        # Get weather data
        weather_url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        weather_response = requests.get(weather_url)
        weather_data = weather_response.json()
        
        # Get city name from coordinates
        city_name = weather_data['name']
        
        # Check for weather alerts
        alerts = check_weather_alerts(weather_data)
        
        # Format and send detailed weather information
        detailed_message = format_detailed_weather(weather_data, city_name)
        if alerts:
            detailed_message += "\n\n" + "\n".join(alerts)
        await message.answer(detailed_message)
        
    except Exception as e:
        logging.error(f"Error handling location: {e}")
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –ø–æ –≤–∞—à–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@dp.message(Command('compare'))
async def compare_command(message: Message):
    """Start the weather comparison process."""
    await message.answer(
        "–î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –≤ –¥–≤—É—Ö –≥–æ—Ä–æ–¥–∞—Ö, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
    )

@dp.message(lambda message: ',' in message.text)
async def compare_cities(message: Message):
    """Compare weather in two cities."""
    cities = [city.strip() for city in message.text.split(',')]
    if len(cities) != 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–æ–≤–Ω–æ –¥–≤–∞ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
        return

    try:
        weather_data = []
        for city in cities:
            # Get coordinates
            geo_url = f"http://api.openweathermap.org/geo/1.0/direct?q={city}&limit=1&appid={OPENWEATHER_API_KEY}"
            geo_response = requests.get(geo_url)
            geo_data = geo_response.json()
            
            if not geo_data:
                await message.answer(f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ {city}.")
                return
                
            lat = geo_data[0]['lat']
            lon = geo_data[0]['lon']
            
            # Get weather data
            weather_url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
            weather_response = requests.get(weather_url)
            weather_data.append(weather_response.json())
        
        # Compare and format message
        compare_message = f"üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã:\n\n"
        
        for i, data in enumerate(weather_data):
            temp = data['main']['temp']
            feels_like = data['main']['feels_like']
            description = data['weather'][0]['description']
            humidity = data['main']['humidity']
            wind_speed = data['wind']['speed']
            
            compare_message += (
                f"üìç {cities[i]}:\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.1f}¬∞C\n"
                f"ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like:.1f}¬∞C\n"
                f"‚òÅÔ∏è –£—Å–ª–æ–≤–∏—è: {description}\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                f"üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å\n\n"
            )
        
        # Add temperature difference
        temp_diff = abs(weather_data[0]['main']['temp'] - weather_data[1]['main']['temp'])
        compare_message += f"–†–∞–∑–Ω–∏—Ü–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä: {temp_diff:.1f}¬∞C"
        
        await message.answer(compare_message)
        
    except Exception as e:
        logging.error(f"Error comparing cities: {e}")
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–æ–≤. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@dp.message(Command('forecast'))
async def forecast_command(message: Message):
    """Get 5-day weather forecast for the specified city."""
    try:
        city = message.text.split(' ', 1)[1]
    except IndexError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /forecast –ú–æ—Å–∫–≤–∞"
        )
        return

    try:
        # Get coordinates first
        geo_url = f"http://api.openweathermap.org/geo/1.0/direct?q={city}&limit=1&appid={OPENWEATHER_API_KEY}"
        geo_response = requests.get(geo_url)
        geo_data = geo_response.json()
        
        if not geo_data:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
            return
            
        lat = geo_data[0]['lat']
        lon = geo_data[0]['lon']
        
        # Get 5-day forecast data
        forecast_url = f"https://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        forecast_response = requests.get(forecast_url)
        forecast_data = forecast_response.json()
        
        # Process and format forecast data
        forecast_message = f"üåç –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –≥–æ—Ä–æ–¥–µ {city} –Ω–∞ 5 –¥–Ω–µ–π:\n\n"
        
        # Keep track of processed dates to avoid duplicates
        processed_dates = set()
        
        for item in forecast_data['list']:
            # Convert timestamp to date
            date = datetime.fromtimestamp(item['dt'])
            date_str = date.strftime('%d.%m.%Y')
            
            # Only process one forecast per day
            if date_str in processed_dates:
                continue
                
            processed_dates.add(date_str)
            
            # Get weather data
            temp = item['main']['temp']
            feels_like = item['main']['feels_like']
            description = item['weather'][0]['description']
            humidity = item['main']['humidity']
            wind_speed = item['wind']['speed']
            
            # Add day forecast to message
            forecast_message += (
                f"üìÖ {date_str}:\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.1f}¬∞C\n"
                f"ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like:.1f}¬∞C\n"
                f"‚òÅÔ∏è –£—Å–ª–æ–≤–∏—è: {description}\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                f"üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å\n\n"
            )
            
            # Stop after 5 days
            if len(processed_dates) >= 5:
                break
        
        await message.answer(forecast_message)
        
    except Exception as e:
        logging.error(f"Error getting forecast: {e}")
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@dp.message(Command('alerts'))
async def alerts_command(message: Message):
    """Get weather alerts for the specified city."""
    try:
        city = message.text.split(' ', 1)[1]
    except IndexError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /alerts –ú–æ—Å–∫–≤–∞"
        )
        return

    try:
        # Get coordinates first
        geo_url = f"http://api.openweathermap.org/geo/1.0/direct?q={city}&limit=1&appid={OPENWEATHER_API_KEY}"
        geo_response = requests.get(geo_url)
        geo_data = geo_response.json()
        
        if not geo_data:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
            return
            
        lat = geo_data[0]['lat']
        lon = geo_data[0]['lon']
        
        # Get weather data
        weather_url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        weather_response = requests.get(weather_url)
        weather_data = weather_response.json()
        
        # Check for weather alerts
        alerts = check_weather_alerts(weather_data)
        
        if alerts:
            alert_message = f"‚ö†Ô∏è –ü–æ–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}:\n\n" + "\n".join(alerts)
        else:
            alert_message = f"‚úÖ –û–ø–∞—Å–Ω—ã—Ö –ø–æ–≥–æ–¥–Ω—ã—Ö —è–≤–ª–µ–Ω–∏–π –≤ –≥–æ—Ä–æ–¥–µ {city} –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
        
        await message.answer(alert_message)
        
    except Exception as e:
        logging.error(f"Error getting weather alerts: {e}")
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@dp.message(Command('wear'))
async def wear_command(message: Message):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–µ–∂–¥–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞."""
    try:
        city = message.text.split(' ', 1)[1]
    except IndexError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /wear –ú–æ—Å–∫–≤–∞"
        )
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        geo_url = f"http://api.openweathermap.org/geo/1.0/direct?q={city}&limit=1&appid={OPENWEATHER_API_KEY}"
        geo_response = requests.get(geo_url)
        geo_data = geo_response.json()
        
        if not geo_data:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
            return
            
        lat = geo_data[0]['lat']
        lon = geo_data[0]['lon']
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
        weather_url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        weather_response = requests.get(weather_url)
        weather_data = weather_response.json()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = get_clothing_recommendations(weather_data)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        temp = weather_data['main']['temp']
        feels_like = weather_data['main']['feels_like']
        description = weather_data['weather'][0]['description']
        
        message_text = (
            f"üëî –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–µ–∂–¥–µ –¥–ª—è {city}:\n\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.1f}¬∞C\n"
            f"ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like:.1f}¬∞C\n"
            f"‚òÅÔ∏è –£—Å–ª–æ–≤–∏—è: {description}\n\n"
            f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞–¥–µ—Ç—å:\n"
            f"{chr(10).join('- ' + item for item in recommendations)}"
        )
        
        await message.answer(message_text)
        
    except Exception as e:
        logging.error(f"Error getting clothing recommendations: {e}")
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@dp.message(Command('rain'))
async def rain_map_command(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç—É –æ—Å–∞–¥–∫–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    try:
        city = message.text.split(' ', 1)[1]
    except IndexError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /rain –ú–æ—Å–∫–≤–∞"
        )
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
        geo_url = f"http://api.openweathermap.org/geo/1.0/direct?q={city}&limit=1&appid={OPENWEATHER_API_KEY}"
        geo_response = requests.get(geo_url)
        geo_data = geo_response.json()
        
        if not geo_data:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
            return
            
        lat = geo_data[0]['lat']
        lon = geo_data[0]['lon']
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–∞–¥–∫–æ–≤ –≤ —Ä–µ–≥–∏–æ–Ω–µ
        weather_url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        async with aiohttp.ClientSession() as session:
            async with session.get(weather_url) as response:
                weather_data = await response.json()
        
        # –ü–æ–ª—É—á–∞–µ–º URL –∫–∞—Ä—Ç—ã –æ—Å–∞–¥–∫–æ–≤
        map_url = await get_precipitation_map(lat, lon)
        
        if map_url:
            try:
                # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
                await message.answer_photo(
                    map_url,
                    caption=f"üó∫ –ö–∞—Ä—Ç–∞ –æ—Å–∞–¥–∫–æ–≤ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}\n"
                            f"üîµ –°–∏–Ω–∏–π —Ü–≤–µ—Ç - –¥–æ–∂–¥—å\n"
                            f"üü£ –§–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ü–≤–µ—Ç - —Å–º–µ—à–∞–Ω–Ω—ã–µ –æ—Å–∞–¥–∫–∏\n"
                            f"‚ö™Ô∏è –ë–µ–ª—ã–π —Ü–≤–µ—Ç - —Å–Ω–µ–≥"
                )
            except Exception as photo_error:
                logging.error(f"Error sending photo: {photo_error}")
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–∏–º —Ö–æ—Ç—è –±—ã —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å–∞–¥–∫–∞—Ö
                if 'rain' in weather_data or 'snow' in weather_data:
                    precipitation_info = "–¢–µ–∫—É—â–∏–µ –æ—Å–∞–¥–∫–∏:\n"
                    if 'rain' in weather_data:
                        precipitation_info += f"üåß –î–æ–∂–¥—å: {weather_data['rain'].get('1h', 0)} –º–º/—á\n"
                    if 'snow' in weather_data:
                        precipitation_info += f"üå® –°–Ω–µ–≥: {weather_data['snow'].get('1h', 0)} –º–º/—á\n"
                    await message.answer(precipitation_info)
                else:
                    await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Å–∞–¥–∫–æ–≤ –Ω–µ—Ç.")
        else:
            # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –æ—Ç–ø—Ä–∞–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ
            weather_info = f"–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ {city}:\n"
            weather_info += f"‚òÅÔ∏è {weather_data['weather'][0]['description']}\n"
            if 'rain' in weather_data:
                weather_info += f"üåß –î–æ–∂–¥—å: {weather_data['rain'].get('1h', 0)} –º–º/—á\n"
            if 'snow' in weather_data:
                weather_info += f"üå® –°–Ω–µ–≥: {weather_data['snow'].get('1h', 0)} –º–º/—á\n"
            if 'rain' not in weather_data and 'snow' not in weather_data:
                weather_info += "–û—Å–∞–¥–∫–æ–≤ –Ω–µ—Ç"
            await message.answer(weather_info)
            
    except Exception as e:
        logging.error(f"Error in rain_map_command: {e}")
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã –æ—Å–∞–¥–∫–æ–≤. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query(lambda c: c.data.startswith(('zoom_in_', 'zoom_out_')))
async def process_zoom(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã"""
    try:
        action, city = callback_query.data.split('_', 1)
        zoom = 10 if action == 'zoom_in' else 6
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
        geo_url = f"http://api.openweathermap.org/geo/1.0/direct?q={city}&limit=1&appid={OPENWEATHER_API_KEY}"
        geo_response = requests.get(geo_url)
        geo_data = geo_response.json()
        
        if not geo_data:
            await callback_query.answer("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        lat = geo_data[0]['lat']
        lon = geo_data[0]['lon']
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º –º–∞—Å—à—Ç–∞–±–æ–º
        map_url = await get_precipitation_map(lat, lon, zoom)
        
        if map_url:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            await callback_query.message.edit_media(
                types.InputMediaPhoto(
                    media=map_url,
                    caption=f"üó∫ –ö–∞—Ä—Ç–∞ –æ—Å–∞–¥–∫–æ–≤ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}\n"
                            f"üîµ –°–∏–Ω–∏–π —Ü–≤–µ—Ç - –¥–æ–∂–¥—å\n"
                            f"üü£ –§–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ü–≤–µ—Ç - —Å–º–µ—à–∞–Ω–Ω—ã–µ –æ—Å–∞–¥–∫–∏\n"
                            f"‚ö™Ô∏è –ë–µ–ª—ã–π —Ü–≤–µ—Ç - —Å–Ω–µ–≥"
                ),
                reply_markup=callback_query.message.reply_markup
            )
            await callback_query.answer()
        else:
            await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç—É")
            
    except Exception as e:
        logging.error(f"Error in process_zoom: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Å—à—Ç–∞–±–∞")

@dp.message()
async def get_weather(message: Message):
    """Get current weather for the specified city."""
    if message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await help_command(message)
        return

    city = message.text
    
    try:
        # Get coordinates first
        geo_url = f"http://api.openweathermap.org/geo/1.0/direct?q={city}&limit=1&appid={OPENWEATHER_API_KEY}"
        geo_response = requests.get(geo_url)
        geo_data = geo_response.json()
        
        if not geo_data:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
            return
            
        lat = geo_data[0]['lat']
        lon = geo_data[0]['lon']
        
        # Get weather data
        weather_url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        weather_response = requests.get(weather_url)
        weather_data = weather_response.json()
        
        # Check for weather alerts
        alerts = check_weather_alerts(weather_data)
        
        # Format and send detailed weather information
        detailed_message = format_detailed_weather(weather_data, city)
        if alerts:
            detailed_message += "\n\n" + "\n".join(alerts)
        await message.answer(detailed_message)
        
    except Exception as e:
        logging.error(f"Error getting weather: {e}")
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def process_update(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
    data = await request.json()
    update = types.Update(**data)
    await dp.feed_update(bot=bot, update=update)
    return web.Response()

async def healthcheck(request):
    """–ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    return web.Response(text="Bot is running")

async def on_shutdown(app):
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    print("Shutting down...")
    try:
        await bot.session.close()
        await dp.storage.close()
    except Exception as e:
        print(f"Error during shutdown: {e}")

async def on_startup(app):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    webhook_path = f"/webhook/{TELEGRAM_BOT_TOKEN}"
    webhook_url = os.environ.get('RENDER_EXTERNAL_URL', 'http://localhost:8080') + webhook_path
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    await bot.set_webhook(
        url=webhook_url,
        drop_pending_updates=True
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    await bot.set_my_commands(COMMANDS)
    print(f"Webhook set to {webhook_url}")
    print("Bot commands updated successfully")

async def main():
    """Start the bot."""
    try:
        # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = web.Application()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        webhook_path = f"/webhook/{TELEGRAM_BOT_TOKEN}"
        app.router.add_post(webhook_path, process_update)
        app.router.add_get("/", healthcheck)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app.on_startup.append(on_startup)
        app.on_shutdown.append(on_shutdown)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        port = int(os.environ.get('PORT', 8080))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', port)
        await site.start()
        print(f"Web server is running on port {port}")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await asyncio.Event().wait()
        
    except Exception as e:
        print(f"Error: {e}")
        raise
    finally:
        await on_shutdown(app)

if __name__ == '__main__':
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        for signal_name in ('SIGINT', 'SIGTERM'):
            if hasattr(signal, signal_name):
                signal.signal(getattr(signal, signal_name), lambda s, f: asyncio.get_event_loop().stop())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        print("Starting bot...")
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print('Bot stopped')
    except Exception as e:
        print(f"Critical error: {e}")
        sys.exit(1) 