import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, BotCommand, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import requests
from dotenv import load_dotenv
import asyncio
from datetime import datetime, timedelta, time
import pytz
import signal
import sys
from aiohttp import web
import aiohttp
import math
from urllib.parse import quote
import json
from collections import defaultdict
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from contextlib import suppress

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# Get environment variables
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENWEATHER_API_KEY = os.getenv('OPENWEATHER_API_KEY')

# Initialize bot and dispatcher
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()
scheduler = None
app = None
runner = None

# Bot commands for menu
COMMANDS = [
    BotCommand(command='start', description='–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
    BotCommand(command='help', description='–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å'),
    BotCommand(command='forecast', description='–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π'),
    BotCommand(command='detailed', description='–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ'),
    BotCommand(command='air', description='–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞'),
    BotCommand(command='compare', description='–°—Ä–∞–≤–Ω–∏—Ç—å –ø–æ–≥–æ–¥—É –≤ –¥–≤—É—Ö –≥–æ—Ä–æ–¥–∞—Ö'),
    BotCommand(command='alerts', description='–ü–æ–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è'),
    BotCommand(command='wear', description='–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–µ–∂–¥–µ'),
    BotCommand(command='rain', description='–ö–∞—Ä—Ç–∞ –æ—Å–∞–¥–∫–æ–≤'),
    BotCommand(command='subscribe', description='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ'),
    BotCommand(command='unsubscribe', description='–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'),
    BotCommand(command='stats', description='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–≥–æ–¥—ã'),
    BotCommand(command='shelter', description='–ù–∞–π—Ç–∏ —É–∫—Ä—ã—Ç–∏–µ –æ—Ç –Ω–µ–ø–æ–≥–æ–¥—ã'),
    BotCommand(command='preferences', description='–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'),
    BotCommand(command='activities', description='–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π'),
    BotCommand(command='notifytime', description='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
]

# –î–æ–±–∞–≤–∏–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
weather_subscriptions = defaultdict(list)  # {user_id: [(city, lat, lon), ...]}
weather_stats = defaultdict(lambda: defaultdict(list))  # {city: {'temp': [], 'humidity': [], ...}}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
user_preferences = defaultdict(lambda: {
    'activities': [],  # –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
    'notification_time': '09:00',  # –í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    'temp_range': {'min': 15, 'max': 25},  # –ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
    'notify_changes': True,  # –£–≤–µ–¥–æ–º–ª—è—Ç—å –æ —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –ø–æ–≥–æ–¥—ã
    'rain_alerts': True,  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–∂–¥–µ
    'wind_threshold': 10,  # –ü–æ—Ä–æ–≥ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ—Ç—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    'uv_alerts': True,  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –£–§-–∏–Ω–¥–µ–∫—Å–µ
})

# –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∏—Ö –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
ACTIVITIES = {
    'running': {
        'temp_range': (5, 20),
        'wind_max': 5,
        'no_rain': True,
        'description': '–±–µ–≥–∞'
    },
    'cycling': {
        'temp_range': (10, 25),
        'wind_max': 7,
        'no_rain': True,
        'description': '–≤–µ–ª–æ–ø—Ä–æ–≥—É–ª–∫–∏'
    },
    'walking': {
        'temp_range': (15, 25),
        'wind_max': 10,
        'no_rain': True,
        'description': '–ø—Ä–æ–≥—É–ª–∫–∏'
    },
    'picnic': {
        'temp_range': (20, 27),
        'wind_max': 5,
        'no_rain': True,
        'description': '–ø–∏–∫–Ω–∏–∫–∞'
    }
}

def get_clothing_recommendations(weather_data):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–µ–∂–¥–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
    temp = weather_data['main']['temp']
    feels_like = weather_data['main']['feels_like']
    wind_speed = weather_data['wind']['speed']
    description = weather_data['weather'][0]['description'].lower()
    humidity = weather_data['main']['humidity']
    
    recommendations = []
    
    # –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
    if feels_like <= -20:
        recommendations.extend([
            "üß• –¢–µ–ø–ª—ã–π –∑–∏–º–Ω–∏–π –ø—É—Ö–æ–≤–∏–∫ –∏–ª–∏ —à—É–±–∞",
            "üß£ –¢–µ–ø–ª—ã–π —à–∞—Ä—Ñ",
            "üß§ –¢–µ–ø–ª—ã–µ –ø–µ—Ä—á–∞—Ç–∫–∏ –∏–ª–∏ –≤–∞—Ä–µ–∂–∫–∏",
            "üë¢ –ó–∏–º–Ω–∏–µ —É—Ç–µ–ø–ª–µ–Ω–Ω—ã–µ –±–æ—Ç–∏–Ω–∫–∏",
            "üß¶ –¢–µ–ø–ª—ã–µ –Ω–æ—Å–∫–∏, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —à–µ—Ä—Å—Ç—è–Ω—ã–µ",
            "üëñ –¢–µ–ø–ª—ã–µ –∑–∏–º–Ω–∏–µ –±—Ä—é–∫–∏ –∏–ª–∏ —Ç–µ—Ä–º–æ–±–µ–ª—å–µ"
        ])
    elif -20 < feels_like <= -10:
        recommendations.extend([
            "üß• –ó–∏–º–Ω—è—è –∫—É—Ä—Ç–∫–∞ –∏–ª–∏ –ø—É—Ö–æ–≤–∏–∫",
            "üß£ –®–∞—Ä—Ñ",
            "üß§ –ü–µ—Ä—á–∞—Ç–∫–∏",
            "üë¢ –ó–∏–º–Ω—è—è –æ–±—É–≤—å",
            "üß¶ –¢–µ–ø–ª—ã–µ –Ω–æ—Å–∫–∏"
        ])
    elif -10 < feels_like <= 0:
        recommendations.extend([
            "üß• –î–µ–º–∏—Å–µ–∑–æ–Ω–Ω–∞—è –∫—É—Ä—Ç–∫–∞ –∏–ª–∏ –ª–µ–≥–∫–∏–π –ø—É—Ö–æ–≤–∏–∫",
            "üß£ –õ–µ–≥–∫–∏–π —à–∞—Ä—Ñ",
            "üß§ –ü–µ—Ä—á–∞—Ç–∫–∏",
            "üëû –£—Ç–µ–ø–ª–µ–Ω–Ω–∞—è –æ–±—É–≤—å"
        ])
    elif 0 < feels_like <= 10:
        recommendations.extend([
            "üß• –õ–µ–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞ –∏–ª–∏ –ø–ª–∞—â",
            "üß• –°–≤–∏—Ç–µ—Ä –∏–ª–∏ –∫–æ—Ñ—Ç–∞",
            "üëû –ó–∞–∫—Ä—ã—Ç–∞—è –æ–±—É–≤—å"
        ])
    elif 10 < feels_like <= 20:
        recommendations.extend([
            "üëï –õ–µ–≥–∫–∞—è –∫–æ—Ñ—Ç–∞ –∏–ª–∏ —Ä—É–±–∞—à–∫–∞",
            "üëñ –ë—Ä—é–∫–∏ –∏–ª–∏ –¥–∂–∏–Ω—Å—ã",
            "üëü –õ–µ–≥–∫–∞—è –æ–±—É–≤—å"
        ])
    elif 20 < feels_like <= 25:
        recommendations.extend([
            "üëï –§—É—Ç–±–æ–ª–∫–∞ –∏–ª–∏ —Ä—É–±–∞—à–∫–∞ —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ä—É–∫–∞–≤–æ–º",
            "üëñ –õ–µ–≥–∫–∏–µ –±—Ä—é–∫–∏ –∏–ª–∏ —à–æ—Ä—Ç—ã",
            "üëü –õ–µ–≥–∫–∞—è –æ–±—É–≤—å –∏–ª–∏ —Å–∞–Ω–¥–∞–ª–∏–∏"
        ])
    else:  # > 25
        recommendations.extend([
            "üëï –õ–µ–≥–∫–∞—è –æ–¥–µ–∂–¥–∞ –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —Ç–∫–∞–Ω–µ–π",
            "ü©≥ –®–æ—Ä—Ç—ã –∏–ª–∏ –ª–µ–≥–∫–∞—è —é–±–∫–∞",
            "üë° –°–∞–Ω–¥–∞–ª–∏–∏ –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞—è –æ–±—É–≤—å"
        ])
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏–π
    if "–¥–æ–∂–¥—å" in description or "–ª–∏–≤–µ–Ω—å" in description:
        recommendations.extend([
            "‚òîÔ∏è –ó–æ–Ω—Ç",
            "üß• –í–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º–∞—è –∫—É—Ä—Ç–∫–∞ –∏–ª–∏ –ø–ª–∞—â",
            "üë¢ –ù–µ–ø—Ä–æ–º–æ–∫–∞–µ–º–∞—è –æ–±—É–≤—å"
        ])
    
    if "—Å–Ω–µ–≥" in description:
        recommendations.append("üë¢ –í–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º–∞—è –æ–±—É–≤—å —Å –Ω–µ—Å–∫–æ–ª—å–∑—è—â–µ–π –ø–æ–¥–æ—à–≤–æ–π")
    
    if wind_speed > 10:
        recommendations.append("üß• –í–µ—Ç—Ä–æ–∑–∞—â–∏—Ç–Ω–∞—è –∫—É—Ä—Ç–∫–∞ –∏–ª–∏ –ø–ª–∞—â")
    
    if humidity > 80 and temp > 20:
        recommendations.append("üëï –õ–µ–≥–∫–∞—è –¥—ã—à–∞—â–∞—è –æ–¥–µ–∂–¥–∞ –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —Ç–∫–∞–Ω–µ–π")
    
    if "—Å–æ–ª–Ω–µ—á–Ω–æ" in description or "—è—Å–Ω–æ" in description:
        if temp > 20:
            recommendations.extend([
                "üß¢ –ì–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä –æ—Ç —Å–æ–ª–Ω—Ü–∞",
                "üï∂ –°–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏"
            ])
    
    return recommendations

def lat_lon_to_tile(lat, lon, zoom):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –Ω–æ–º–µ—Ä–∞ —Ç–∞–π–ª–æ–≤"""
    lat_rad = math.radians(lat)
    n = 2.0 ** zoom
    xtile = int((lon + 180.0) / 360.0 * n)
    ytile = int((1.0 - math.asinh(math.tan(lat_rad)) / math.pi) / 2.0 * n)
    return xtile, ytile

async def get_precipitation_map(lat, lon, zoom=8):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ä—Ç—É –æ—Å–∞–¥–∫–æ–≤ –¥–ª—è –∑–∞–¥–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ç–∞–π–ª—ã
        xtile, ytile = lat_lon_to_tile(lat, lon, zoom)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∫–∞—Ä—Ç—ã –æ—Å–∞–¥–∫–æ–≤
        map_url = (
            f"https://tile.openweathermap.org/map/precipitation_new/{zoom}/{xtile}/{ytile}.png"
            f"?appid={OPENWEATHER_API_KEY}"
        )
        
        logging.info(f"Requesting precipitation map: {map_url}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞–π–ª–∞
        async with aiohttp.ClientSession() as session:
            async with session.get(map_url) as response:
                if response.status == 200:
                    content = await response.read()
                    if len(content) > 1000:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        return map_url
                    else:
                        logging.warning(f"Empty or invalid tile received: {len(content)} bytes")
                        return None
                else:
                    logging.error(f"Failed to fetch tile: {response.status}")
                    return None
    except Exception as e:
        logging.error(f"Error fetching precipitation map: {e}")
        return None

def create_main_keyboard():
    """Create main keyboard with location button."""
    keyboard = [
        [{"text": "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", "request_location": True}],
        [{"text": "‚ÑπÔ∏è –ü–æ–º–æ—â—å"}]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def format_detailed_weather(weather_data, city_name):
    """Format detailed weather information."""
    # Basic weather info
    temp = weather_data['main']['temp']
    feels_like = weather_data['main']['feels_like']
    description = weather_data['weather'][0]['description']
    humidity = weather_data['main']['humidity']
    wind_speed = weather_data['wind']['speed']
    pressure = weather_data['main']['pressure']
    
    # Convert sunrise and sunset timestamps to datetime
    timezone_offset = weather_data['timezone']
    sunrise_time = datetime.fromtimestamp(weather_data['sys']['sunrise'] + timezone_offset).strftime('%H:%M')
    sunset_time = datetime.fromtimestamp(weather_data['sys']['sunset'] + timezone_offset).strftime('%H:%M')
    
    # Calculate wind direction
    wind_deg = weather_data.get('wind', {}).get('deg', 0)
    wind_directions = ['–°', '–°–í', '–í', '–Æ–í', '–Æ', '–Æ–ó', '–ó', '–°–ó']
    wind_direction = wind_directions[round(wind_deg / 45) % 8]
    
    # Visibility in kilometers
    visibility = weather_data.get('visibility', 0) / 1000
    
    # Clouds percentage
    clouds = weather_data['clouds']['all']
    
    return (
        f"üåç –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ –≤ –≥–æ—Ä–æ–¥–µ {city_name}:\n\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.1f}¬∞C\n"
        f"ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like:.1f}¬∞C\n"
        f"‚òÅÔ∏è –£—Å–ª–æ–≤–∏—è: {description}\n"
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
        f"üí® –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {wind_direction}\n"
        f"üåÖ –í–æ—Å—Ö–æ–¥: {sunrise_time}\n"
        f"üåá –ó–∞–∫–∞—Ç: {sunset_time}\n"
        f"üå° –î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –≥–ü–∞\n"
        f"üëÅ –í–∏–¥–∏–º–æ—Å—Ç—å: {visibility:.1f} –∫–º\n"
        f"‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {clouds}%"
    )

def check_weather_alerts(weather_data):
    """Check for dangerous weather conditions."""
    alerts = []
    
    # Check temperature
    temp = weather_data['main']['temp']
    if temp > 30:
        alerts.append("üå° –°–∏–ª—å–Ω–∞—è –∂–∞—Ä–∞! –ò–∑–±–µ–≥–∞–π—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –Ω–∞ —Å–æ–ª–Ω—Ü–µ")
    elif temp < -15:
        alerts.append("‚ùÑÔ∏è –°–∏–ª—å–Ω—ã–π –º–æ—Ä–æ–∑! –¢–µ–ø–ª–æ –æ–¥–µ–Ω—å—Ç–µ—Å—å")
    
    # Check wind
    wind_speed = weather_data['wind']['speed']
    if wind_speed > 15:
        alerts.append(f"üí® –°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä {wind_speed} –º/—Å! –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –Ω–∞ —É–ª–∏—Ü–µ")
    
    # Check rain/snow/thunderstorm
    if 'rain' in weather_data:
        rain = weather_data['rain'].get('1h', 0)
        if rain > 10:
            alerts.append("üåß –°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å! –í–æ–∑—å–º–∏—Ç–µ –∑–æ–Ω—Ç")
    if 'snow' in weather_data:
        snow = weather_data['snow'].get('1h', 0)
        if snow > 5:
            alerts.append("üå® –°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥! –í–æ–∑–º–æ–∂–Ω—ã –∑–∞–Ω–æ—Å—ã –Ω–∞ –¥–æ—Ä–æ–≥–∞—Ö")
    
    # Check visibility
    visibility = weather_data.get('visibility', 10000) / 1000  # convert to km
    if visibility < 1:
        alerts.append("üå´ –û—á–µ–Ω—å –ø–ª–æ—Ö–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å! –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã")
    
    # Check weather conditions
    weather_id = weather_data['weather'][0]['id']
    if weather_id in range(200, 300):  # Thunderstorm
        alerts.append("‚õà –ì—Ä–æ–∑–∞! –°–æ–±–ª—é–¥–∞–π—Ç–µ –º–µ—Ä—ã –ø—Ä–µ–¥–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏")
    
    return alerts

@dp.message(CommandStart())
async def start_command(message: Message):
    """Send a message when the command /start is issued."""
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã. üå§\n'
        '–Ø –º–æ–≥—É:\n'
        '1. –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É (–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥)\n'
        '2. –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π (/forecast –≥–æ—Ä–æ–¥)\n'
        '3. –ü–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ (/detailed –≥–æ—Ä–æ–¥)\n'
        '4. –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ (/air –≥–æ—Ä–æ–¥)\n'
        '5. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–≥–æ–¥—É –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏\n'
        '6. –°—Ä–∞–≤–Ω–∏—Ç—å –ø–æ–≥–æ–¥—É –≤ —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö (/compare)\n'
        '7. –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (/alerts –≥–æ—Ä–æ–¥)\n'
        '8. –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–µ–∂–¥–µ (/wear –≥–æ—Ä–æ–¥)\n'
        '9. –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –æ—Å–∞–¥–∫–æ–≤ (/rain –≥–æ—Ä–æ–¥)\n'
        '10. –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ (/subscribe –≥–æ—Ä–æ–¥)\n'
        '11. –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (/unsubscribe –≥–æ—Ä–æ–¥)\n'
        '12. –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–≥–æ–¥—ã (/stats –≥–æ—Ä–æ–¥)\n'
        '13. –ù–∞–π—Ç–∏ —É–∫—Ä—ã—Ç–∏–µ –æ—Ç –Ω–µ–ø–æ–≥–æ–¥—ã (/shelter)\n'
        '14. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (/preferences)\n'
        '15. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (/activities)\n'
        '16. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (/notifytime)\n\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é!',
        reply_markup=create_main_keyboard()
    )

@dp.message(Command('help'))
async def help_command(message: Message):
    """Send a message when the command /help is issued."""
    await message.answer(
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n'
        '1. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã\n'
        '2. /forecast –ì–û–†–û–î - –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π\n'
        '3. /detailed –ì–û–†–û–î - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n'
        '4. /air –ì–û–†–û–î - –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞\n'
        '5. /compare - —Å—Ä–∞–≤–Ω–∏—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–∞—Ö\n'
        '6. /alerts –ì–û–†–û–î - –ø–æ–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\n'
        '7. /wear –ì–û–†–û–î - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–µ–∂–¥–µ\n'
        '8. /rain –ì–û–†–û–î - –∫–∞—Ä—Ç–∞ –æ—Å–∞–¥–∫–æ–≤\n'
        '9. /subscribe –ì–û–†–û–î - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ\n'
        '10. /unsubscribe –ì–û–†–û–î - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n'
        '11. /stats –ì–û–†–û–î - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–≥–æ–¥—ã\n'
        '12. /shelter - –Ω–∞–π—Ç–∏ —É–∫—Ä—ã—Ç–∏–µ –æ—Ç –Ω–µ–ø–æ–≥–æ–¥—ã\n'
        '13. /preferences - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n'
        '14. /activities - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n'
        '15. /notifytime - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n'
        '16. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é" –¥–ª—è –ø–æ–≥–æ–¥—ã –≤ –≤–∞—à–µ–º –º–µ—Å—Ç–µ\n\n'
        '–ü—Ä–∏–º–µ—Ä—ã:\n'
        '- "–ú–æ—Å–∫–≤–∞" - —Ç–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞\n'
        '- "/forecast –ü–∞—Ä–∏–∂" - –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π\n'
        '- "/detailed –õ–æ–Ω–¥–æ–Ω" - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n'
        '- "/alerts –ú–æ—Å–∫–≤–∞" - –ø–æ–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è',
        reply_markup=create_main_keyboard()
    )

@dp.message(Command('detailed'))
async def detailed_command(message: Message):
    """Get detailed weather information for the specified city."""
    try:
        city = message.text.split(' ', 1)[1]
    except IndexError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /detailed –ú–æ—Å–∫–≤–∞"
        )
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
        result = await get_city_coordinates(city)
        if not result:
            await message.answer(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n"
                "2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º\n"
                "3. –£–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏"
            )
            return
            
        lat, lon, normalized_city = result
        
        # Get detailed weather data
        weather_url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        async with aiohttp.ClientSession() as session:
            async with session.get(weather_url) as response:
                weather_data = await response.json()
        
        # Check for weather alerts
        alerts = check_weather_alerts(weather_data)
        
        # Format and send detailed weather information
        detailed_message = format_detailed_weather(weather_data, normalized_city)
        if alerts:
            detailed_message += "\n\n" + "\n".join(alerts)
        await message.answer(detailed_message)
        
    except Exception as e:
        logging.error(f"Error getting detailed weather: {e}")
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def get_air_quality_recommendations(aqi, components):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞"""
    recommendations = []
    
    # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ AQI
    aqi_recommendations = {
        1: [
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ - –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ª—é–±–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ —É–ª–∏—Ü–µ",
            "üèÉ‚Äç‚ôÇÔ∏è –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–ø–æ—Ä—Ç–∞ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ",
            "üå≥ –ú–æ–∂–Ω–æ –¥–æ–ª–≥–æ –≥—É–ª—è—Ç—å –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è —Å–≤–µ–∂–∏–º –≤–æ–∑–¥—É—Ö–æ–º"
        ],
        2: [
            "‚úÖ –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ - –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –ª—é–¥–µ–π",
            "‚ö†Ô∏è –õ—é–¥—è–º —Å –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é —Å–ª–µ–¥—É–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏",
            "üèÉ‚Äç‚ôÇÔ∏è –ú–æ–∂–Ω–æ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º –Ω–∞ —É–ª–∏—Ü–µ"
        ],
        3: [
            "‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω–æ–µ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ - —Å–ª–µ–¥—É–µ—Ç –±—ã—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–º",
            "üò∑ –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –≥—Ä—É–ø–ø–∞–º –ª—É—á—à–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø—Ä–µ–±—ã–≤–∞–Ω–∏–µ –Ω–∞ —É–ª–∏—Ü–µ",
            "üèÉ‚Äç‚ôÇÔ∏è –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–æ–∑–¥—É—Ö–µ"
        ],
        4: [
            "‚ùó –ü–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ - –ø—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã –ø—Ä–µ–¥–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏",
            "üò∑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–æ—Å–∏—Ç—å –º–∞—Å–∫—É –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –Ω–∞ —É–ª–∏—Ü—É",
            "üè† –ü–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏",
            "üöó –î–µ—Ä–∂–∏—Ç–µ –æ–∫–Ω–∞ –≤ –º–∞—à–∏–Ω–µ –∑–∞–∫—Ä—ã—Ç—ã–º–∏"
        ],
        5: [
            "‚õî –û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ - —Å–µ—Ä—å–µ–∑–Ω—ã–π —Ä–∏—Å–∫ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è",
            "üè† –ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏",
            "üò∑ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ—Å–ø–∏—Ä–∞—Ç–æ—Ä",
            "‚ùó –ò–∑–±–µ–≥–∞–π—Ç–µ –ª—é–±–æ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ —É–ª–∏—Ü–µ"
        ]
    }
    
    recommendations.extend(aqi_recommendations.get(aqi, []))
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    if components['pm2_5'] > 25:  # WHO guideline value
        recommendations.append("üò∑ –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –º–µ–ª–∫–∏—Ö —á–∞—Å—Ç–∏—Ü PM2.5 - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞—Å–∫—É —Å —Ö–æ—Ä–æ—à–µ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π")
    
    if components['pm10'] > 50:  # WHO guideline value
        recommendations.append("üò∑ –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∫—Ä—É–ø–Ω—ã—Ö —á–∞—Å—Ç–∏—Ü PM10 - –∏–∑–±–µ–≥–∞–π—Ç–µ –ø—ã–ª—å–Ω—ã—Ö –º–µ—Å—Ç")
    
    if components['o3'] > 100:  # High ozone level
        recommendations.append("‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ–∑–æ–Ω–∞ - –∏–∑–±–µ–≥–∞–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ —É–ª–∏—Ü–µ –≤ –∂–∞—Ä–∫–æ–µ –≤—Ä–µ–º—è –¥–Ω—è")
    
    if components['no2'] > 200:  # High NO2 level
        recommendations.append("üè≠ –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–∏–æ–∫—Å–∏–¥–∞ –∞–∑–æ—Ç–∞ - –¥–µ—Ä–∂–∏—Ç–µ—Å—å –ø–æ–¥–∞–ª—å—à–µ –æ—Ç –æ–∂–∏–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ—Ä–æ–≥")
    
    if components['so2'] > 350:  # High SO2 level
        recommendations.append("‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–∏–æ–∫—Å–∏–¥–∞ —Å–µ—Ä—ã - –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å —Ä–µ—Å–ø–∏—Ä–∞—Ç–æ—Ä–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
    
    return recommendations

def format_air_quality_message(city, air_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞"""
    aqi = air_data['list'][0]['main']['aqi']
    components = air_data['list'][0]['components']
    
    # AQI levels description
    aqi_levels = {
        1: "–û—Ç–ª–∏—á–Ω–æ–µ üåü",
        2: "–•–æ—Ä–æ—à–µ–µ üåø",
        3: "–£–º–µ—Ä–µ–Ω–Ω–æ–µ üòê",
        4: "–ü–ª–æ—Ö–æ–µ üò∑",
        5: "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ ‚ö†Ô∏è"
    }
    
    # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è
    components_info = {
        'co': ('CO', '–£–≥–∞—Ä–Ω—ã–π –≥–∞–∑', '–º–∫–≥/–º¬≥'),
        'no': ('NO', '–û–∫—Å–∏–¥ –∞–∑–æ—Ç–∞', '–º–∫–≥/–º¬≥'),
        'no2': ('NO‚ÇÇ', '–î–∏–æ–∫—Å–∏–¥ –∞–∑–æ—Ç–∞', '–º–∫–≥/–º¬≥'),
        'o3': ('O‚ÇÉ', '–û–∑–æ–Ω', '–º–∫–≥/–º¬≥'),
        'so2': ('SO‚ÇÇ', '–î–∏–æ–∫—Å–∏–¥ —Å–µ—Ä—ã', '–º–∫–≥/–º¬≥'),
        'pm2_5': ('PM2.5', '–ú–µ–ª–∫–∏–µ —á–∞—Å—Ç–∏—Ü—ã', '–º–∫–≥/–º¬≥'),
        'pm10': ('PM10', '–ö—Ä—É–ø–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã', '–º–∫–≥/–º¬≥'),
        'nh3': ('NH‚ÇÉ', '–ê–º–º–∏–∞–∫', '–º–∫–≥/–º¬≥')
    }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = [
        f"üå¨ –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –≤ {city}:",
        f"\nüìä –û–±—â–∏–π –∏–Ω–¥–µ–∫—Å: {aqi_levels[aqi]}",
        "\nüìà –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤–æ–∑–¥—É—Ö–∞:"
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
    for code, (symbol, name, unit) in components_info.items():
        if code in components:
            value = components[code]
            message.append(f"‚Ä¢ {symbol} ({name}): {value:.1f} {unit}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = get_air_quality_recommendations(aqi, components)
    if recommendations:
        message.append("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        message.extend(recommendations)
    
    return "\n".join(message)

@dp.message(Command('air'))
async def air_quality_command(message: Message):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    try:
        city = message.text.split(' ', 1)[1]
    except IndexError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /air –ú–æ—Å–∫–≤–∞"
        )
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        geo_url = f"http://api.openweathermap.org/geo/1.0/direct?q={city}&limit=1&appid={OPENWEATHER_API_KEY}"
        async with aiohttp.ClientSession() as session:
            async with session.get(geo_url) as response:
                geo_data = await response.json()
        
        if not geo_data:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
            return
            
        lat = geo_data[0]['lat']
        lon = geo_data[0]['lon']
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞
        air_url = f"http://api.openweathermap.org/data/2.5/air_pollution?lat={lat}&lon={lon}&appid={OPENWEATHER_API_KEY}"
        async with aiohttp.ClientSession() as session:
            async with session.get(air_url) as response:
                air_data = await response.json()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        air_message = format_air_quality_message(city, air_data)
        await message.answer(air_message)
        
        # –ï—Å–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –ø–ª–æ—Ö–æ–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥–Ω–æ–∑
        if air_data['list'][0]['main']['aqi'] >= 4:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(
                        text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è",
                        callback_data=f"air_forecast_{lat}_{lon}"
                    )
                ]]
            )
            await message.answer(
                "‚ùó –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è. –•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥–Ω–æ–∑?",
                reply_markup=keyboard
            )
        
    except Exception as e:
        logging.error(f"Error getting air quality: {e}")
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@dp.callback_query(lambda c: c.data.startswith('air_forecast_'))
async def air_forecast(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        _, lat, lon = callback_query.data.split('_')[2:]
        lat, lon = float(lat), float(lon)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞
        forecast_url = f"http://api.openweathermap.org/data/2.5/air_pollution/forecast?lat={lat}&lon={lon}&appid={OPENWEATHER_API_KEY}"
        async with aiohttp.ClientSession() as session:
            async with session.get(forecast_url) as response:
                forecast_data = await response.json()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑
        forecasts = forecast_data['list'][:8]  # –ë–µ—Ä–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 24 —á–∞—Å–∞
        aqi_levels = {
            1: "–û—Ç–ª–∏—á–Ω–æ–µ üåü",
            2: "–•–æ—Ä–æ—à–µ–µ üåø",
            3: "–£–º–µ—Ä–µ–Ω–Ω–æ–µ üòê",
            4: "–ü–ª–æ—Ö–æ–µ üò∑",
            5: "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ ‚ö†Ô∏è"
        }
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑
        message = ["üìä –ü—Ä–æ–≥–Ω–æ–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 24 —á–∞—Å–∞:\n"]
        for forecast in forecasts:
            dt = datetime.fromtimestamp(forecast['dt'])
            aqi = forecast['main']['aqi']
            message.append(f"üïê {dt.strftime('%H:%M')}: {aqi_levels[aqi]}")
        
        await callback_query.message.answer("\n".join(message))
        await callback_query.answer()
        
    except Exception as e:
        logging.error(f"Error getting air forecast: {e}")
        await callback_query.message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞."
        )
        await callback_query.answer()

@dp.message(Command('compare'))
async def compare_command(message: Message):
    """Start the weather comparison process."""
    await message.answer(
        "–î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –≤ –¥–≤—É—Ö –≥–æ—Ä–æ–¥–∞—Ö, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
    )

@dp.message(lambda message: ',' in message.text)
async def compare_cities(message: Message):
    """Compare weather in two cities."""
    cities = [city.strip() for city in message.text.split(',')]
    if len(cities) != 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–æ–≤–Ω–æ –¥–≤–∞ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
        return

    try:
        weather_data = []
        for city in cities:
            # Get coordinates
            geo_url = f"http://api.openweathermap.org/geo/1.0/direct?q={city}&limit=1&appid={OPENWEATHER_API_KEY}"
            geo_response = requests.get(geo_url)
            geo_data = geo_response.json()
            
            if not geo_data:
                await message.answer(f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ {city}.")
                return
                
            lat = geo_data[0]['lat']
            lon = geo_data[0]['lon']
            
            # Get weather data
            weather_url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
            weather_response = requests.get(weather_url)
            weather_data.append(weather_response.json())
        
        # Compare and format message
        compare_message = f"üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã:\n\n"
        
        for i, data in enumerate(weather_data):
            temp = data['main']['temp']
            feels_like = data['main']['feels_like']
            description = data['weather'][0]['description']
            humidity = data['main']['humidity']
            wind_speed = data['wind']['speed']
            
            compare_message += (
                f"üìç {cities[i]}:\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.1f}¬∞C\n"
                f"ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like:.1f}¬∞C\n"
                f"‚òÅÔ∏è –£—Å–ª–æ–≤–∏—è: {description}\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                f"üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å\n\n"
            )
        
        # Add temperature difference
        temp_diff = abs(weather_data[0]['main']['temp'] - weather_data[1]['main']['temp'])
        compare_message += f"–†–∞–∑–Ω–∏—Ü–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä: {temp_diff:.1f}¬∞C"
        
        await message.answer(compare_message)
        
    except Exception as e:
        logging.error(f"Error comparing cities: {e}")
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–æ–≤. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@dp.message(Command('forecast'))
async def forecast_command(message: Message):
    """Get 5-day weather forecast for the specified city."""
    try:
        city = message.text.split(' ', 1)[1]
    except IndexError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /forecast –ú–æ—Å–∫–≤–∞"
        )
        return

    try:
        # Get coordinates first
        geo_url = f"http://api.openweathermap.org/geo/1.0/direct?q={city}&limit=1&appid={OPENWEATHER_API_KEY}"
        geo_response = requests.get(geo_url)
        geo_data = geo_response.json()
        
        if not geo_data:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
            return
            
        lat = geo_data[0]['lat']
        lon = geo_data[0]['lon']
        
        # Get 5-day forecast data
        forecast_url = f"https://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        forecast_response = requests.get(forecast_url)
        forecast_data = forecast_response.json()
        
        # Process and format forecast data
        forecast_message = f"üåç –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –≥–æ—Ä–æ–¥–µ {city} –Ω–∞ 5 –¥–Ω–µ–π:\n\n"
        
        # Keep track of processed dates to avoid duplicates
        processed_dates = set()
        
        for item in forecast_data['list']:
            # Convert timestamp to date
            date = datetime.fromtimestamp(item['dt'])
            date_str = date.strftime('%d.%m.%Y')
            
            # Only process one forecast per day
            if date_str in processed_dates:
                continue
                
            processed_dates.add(date_str)
            
            # Get weather data
            temp = item['main']['temp']
            feels_like = item['main']['feels_like']
            description = item['weather'][0]['description']
            humidity = item['main']['humidity']
            wind_speed = item['wind']['speed']
            
            # Add day forecast to message
            forecast_message += (
                f"üìÖ {date_str}:\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.1f}¬∞C\n"
                f"ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like:.1f}¬∞C\n"
                f"‚òÅÔ∏è –£—Å–ª–æ–≤–∏—è: {description}\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                f"üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å\n\n"
            )
            
            # Stop after 5 days
            if len(processed_dates) >= 5:
                break
        
        await message.answer(forecast_message)
        
    except Exception as e:
        logging.error(f"Error getting forecast: {e}")
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@dp.message(Command('alerts'))
async def alerts_command(message: Message):
    """Get weather alerts for the specified city."""
    try:
        city = message.text.split(' ', 1)[1]
    except IndexError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /alerts –ú–æ—Å–∫–≤–∞"
        )
        return

    try:
        # Get coordinates first
        geo_url = f"http://api.openweathermap.org/geo/1.0/direct?q={city}&limit=1&appid={OPENWEATHER_API_KEY}"
        geo_response = requests.get(geo_url)
        geo_data = geo_response.json()
        
        if not geo_data:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
            return
            
        lat = geo_data[0]['lat']
        lon = geo_data[0]['lon']
        
        # Get weather data
        weather_url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        weather_response = requests.get(weather_url)
        weather_data = weather_response.json()
        
        # Check for weather alerts
        alerts = check_weather_alerts(weather_data)
        
        if alerts:
            alert_message = f"‚ö†Ô∏è –ü–æ–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}:\n\n" + "\n".join(alerts)
        else:
            alert_message = f"‚úÖ –û–ø–∞—Å–Ω—ã—Ö –ø–æ–≥–æ–¥–Ω—ã—Ö —è–≤–ª–µ–Ω–∏–π –≤ –≥–æ—Ä–æ–¥–µ {city} –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
        
        await message.answer(alert_message)
        
    except Exception as e:
        logging.error(f"Error getting weather alerts: {e}")
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@dp.message(Command('wear'))
async def wear_command(message: Message):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–µ–∂–¥–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞."""
    try:
        city = message.text.split(' ', 1)[1]
    except IndexError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /wear –ú–æ—Å–∫–≤–∞"
        )
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        geo_url = f"http://api.openweathermap.org/geo/1.0/direct?q={city}&limit=1&appid={OPENWEATHER_API_KEY}"
        geo_response = requests.get(geo_url)
        geo_data = geo_response.json()
        
        if not geo_data:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
            return
            
        lat = geo_data[0]['lat']
        lon = geo_data[0]['lon']
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
        weather_url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        weather_response = requests.get(weather_url)
        weather_data = weather_response.json()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = get_clothing_recommendations(weather_data)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        temp = weather_data['main']['temp']
        feels_like = weather_data['main']['feels_like']
        description = weather_data['weather'][0]['description']
        
        message_text = (
            f"üëî –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–µ–∂–¥–µ –¥–ª—è {city}:\n\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.1f}¬∞C\n"
            f"ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like:.1f}¬∞C\n"
            f"‚òÅÔ∏è –£—Å–ª–æ–≤–∏—è: {description}\n\n"
            f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞–¥–µ—Ç—å:\n"
            f"{chr(10).join('- ' + item for item in recommendations)}"
        )
        
        await message.answer(message_text)
        
    except Exception as e:
        logging.error(f"Error getting clothing recommendations: {e}")
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@dp.message(Command('rain'))
async def rain_map_command(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å–∞–¥–∫–∞—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    try:
        city = message.text.split(' ', 1)[1]
    except IndexError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /rain –ú–æ—Å–∫–≤–∞"
        )
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
        geo_url = f"http://api.openweathermap.org/geo/1.0/direct?q={city}&limit=1&appid={OPENWEATHER_API_KEY}"
        async with aiohttp.ClientSession() as session:
            async with session.get(geo_url) as response:
                geo_data = await response.json()
        
        if not geo_data:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
            return
            
        lat = geo_data[0]['lat']
        lon = geo_data[0]['lon']
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
        weather_url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        async with aiohttp.ClientSession() as session:
            async with session.get(weather_url) as response:
                weather_data = await response.json()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ
        weather_message = f"üåç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Å–∞–¥–∫–∞—Ö –≤ –≥–æ—Ä–æ–¥–µ {city}:\n\n"
        weather_message += f"‚òÅÔ∏è {weather_data['weather'][0]['description']}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å–∞–¥–∫–∞—Ö
        if 'rain' in weather_data:
            weather_message += f"üåß –î–æ–∂–¥—å: {weather_data['rain'].get('1h', 0)} –º–º/—á\n"
        if 'snow' in weather_data:
            weather_message += f"üå® –°–Ω–µ–≥: {weather_data['snow'].get('1h', 0)} –º–º/—á\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –∏ –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏
        weather_message += f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_data['main']['humidity']}%\n"
        weather_message += f"‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {weather_data['clouds']['all']}%\n"
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –æ—Å–∞–¥–∫–æ–≤
        map_url = await get_precipitation_map(lat, lon)
        
        if map_url:
            try:
                await message.answer_photo(
                    map_url,
                    caption=weather_message + "\nüó∫ –ö–∞—Ä—Ç–∞ –æ—Å–∞–¥–∫–æ–≤:"
                )
            except Exception as e:
                logging.error(f"Error sending precipitation map: {e}")
                await message.answer(weather_message + "\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–∞—Ä—Ç–∞ –æ—Å–∞–¥–∫–æ–≤ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        else:
            # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if 'rain' not in weather_data and 'snow' not in weather_data:
                weather_message += "\n‚ú® –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Å–∞–¥–∫–æ–≤ –Ω–µ—Ç"
            await message.answer(weather_message)
            
    except Exception as e:
        logging.error(f"Error in rain_map_command: {e}")
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Å–∞–¥–∫–∞—Ö. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query(lambda c: c.data.startswith(('zoom_in_', 'zoom_out_')))
async def process_zoom(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã"""
    try:
        action, city = callback_query.data.split('_', 1)
        zoom = 10 if action == 'zoom_in' else 6
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
        geo_url = f"http://api.openweathermap.org/geo/1.0/direct?q={city}&limit=1&appid={OPENWEATHER_API_KEY}"
        geo_response = requests.get(geo_url)
        geo_data = geo_response.json()
        
        if not geo_data:
            await callback_query.answer("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        lat = geo_data[0]['lat']
        lon = geo_data[0]['lon']
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º –º–∞—Å—à—Ç–∞–±–æ–º
        map_url = await get_precipitation_map(lat, lon, zoom)
        
        if map_url:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            await callback_query.message.edit_media(
                types.InputMediaPhoto(
                    media=map_url,
                    caption=f"üó∫ –ö–∞—Ä—Ç–∞ –æ—Å–∞–¥–∫–æ–≤ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}\n"
                            f"üîµ –°–∏–Ω–∏–π —Ü–≤–µ—Ç - –¥–æ–∂–¥—å\n"
                            f"üü£ –§–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ü–≤–µ—Ç - —Å–º–µ—à–∞–Ω–Ω—ã–µ –æ—Å–∞–¥–∫–∏\n"
                            f"‚ö™Ô∏è –ë–µ–ª—ã–π —Ü–≤–µ—Ç - —Å–Ω–µ–≥"
                ),
                reply_markup=callback_query.message.reply_markup
            )
            await callback_query.answer()
        else:
            await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç—É")
            
    except Exception as e:
        logging.error(f"Error in process_zoom: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Å—à—Ç–∞–±–∞")

async def get_city_coordinates(city_name: str) -> tuple[float, float, str] | None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –Ω–∞–ø–∏—Å–∞–Ω–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (lat, lon, normalized_city_name) –∏–ª–∏ None –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    try:
        # –°–ø–∏—Å–æ–∫ API –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–∞ (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
        search_apis = [
            # OpenWeatherMap Geocoding API
            {
                'url': lambda city: f"http://api.openweathermap.org/geo/1.0/direct?q={quote(city)}&limit=1&appid={OPENWEATHER_API_KEY}&lang=ru",
                'extract': lambda data: (
                    float(data[0]['lat']),
                    float(data[0]['lon']),
                    data[0].get('local_names', {}).get('ru') or data[0]['name']
                ) if data else None
            },
            # Nominatim API
            {
                'url': lambda city: (
                    f"https://nominatim.openstreetmap.org/search"
                    f"?format=json&q={quote(city)}&limit=1&country=ru"
                ),
                'headers': {'User-Agent': 'WeatherBot/1.0'},
                'extract': lambda data: (
                    float(data[0]['lat']),
                    float(data[0]['lon']),
                    data[0]['display_name'].split(',')[0]
                ) if data else None
            },
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ OpenWeatherMap –±–µ–∑ —è–∑—ã–∫–∞
            {
                'url': lambda city: f"http://api.openweathermap.org/geo/1.0/direct?q={quote(city)}&limit=1&appid={OPENWEATHER_API_KEY}",
                'extract': lambda data: (
                    float(data[0]['lat']),
                    float(data[0]['lon']),
                    data[0]['name']
                ) if data else None
            }
        ]

        # –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π API –ø–æ –æ—á–µ—Ä–µ–¥–∏
        async with aiohttp.ClientSession() as session:
            for api in search_apis:
                try:
                    headers = api.get('headers', {})
                    url = api['url'](city_name)
                    
                    async with session.get(url, headers=headers) as response:
                        if response.status == 200:
                            data = await response.json()
                            if data:  # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –Ω–µ–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
                                result = api['extract'](data)
                                if result:
                                    return result
                except Exception as e:
                    logging.warning(f"Error with geocoding API: {e}")
                    continue

        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –≥–æ—Ä–æ–¥–æ–≤ –†–æ—Å—Å–∏–∏
        russian_cities = {
            '–º–æ—Å–∫–≤–∞': (55.7558, 37.6173, '–ú–æ—Å–∫–≤–∞'),
            '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥': (59.9343, 30.3351, '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'),
            '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': (55.0084, 82.9357, '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫'),
            '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': (56.8519, 60.6122, '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'),
            '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥': (56.2965, 43.9361, '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥'),
            '–∫–∞–∑–∞–Ω—å': (55.7887, 49.1221, '–ö–∞–∑–∞–Ω—å'),
            '—á–µ–ª—è–±–∏–Ω—Å–∫': (55.1644, 61.4368, '–ß–µ–ª—è–±–∏–Ω—Å–∫'),
            '–æ–º—Å–∫': (54.9885, 73.3242, '–û–º—Å–∫'),
            '—Å–∞–º–∞—Ä–∞': (53.1959, 50.1001, '–°–∞–º–∞—Ä–∞'),
            '—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É': (47.2313, 39.7233, '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É'),
            '—É—Ñ–∞': (54.7348, 55.9578, '–£—Ñ–∞'),
            '–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': (56.0090, 92.8719, '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫'),
            '–≤–æ—Ä–æ–Ω–µ–∂': (51.6720, 39.1843, '–í–æ—Ä–æ–Ω–µ–∂'),
            '–ø–µ—Ä–º—å': (58.0105, 56.2502, '–ü–µ—Ä–º—å'),
            '–≤–æ–ª–≥–æ–≥—Ä–∞–¥': (48.7194, 44.5018, '–í–æ–ª–≥–æ–≥—Ä–∞–¥'),
            '—Å–∞—Ä–∞—Ç–æ–≤': (51.5406, 46.0086, '–°–∞—Ä–∞—Ç–æ–≤'),
            '–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä': (45.0355, 38.9753, '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä'),
            '—Ç—é–º–µ–Ω—å': (57.1529, 65.5343, '–¢—é–º–µ–Ω—å'),
            '—Ç–æ–ª—å—è—Ç—Ç–∏': (53.5303, 49.3461, '–¢–æ–ª—å—è—Ç—Ç–∏'),
            '–∏–∂–µ–≤—Å–∫': (56.8498, 53.2045, '–ò–∂–µ–≤—Å–∫')
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –≥–æ—Ä–æ–¥–æ–≤ (—Å —É—á–µ—Ç–æ–º —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–ø–∏—Å–∞–Ω–∏—è)
        city_lower = city_name.lower().replace('—ë', '–µ')
        for known_city, coords in russian_cities.items():
            if city_lower == known_city or city_lower in known_city or known_city in city_lower:
                return coords

        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤—Å–µ–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
        return None

    except Exception as e:
        logging.error(f"Error in get_city_coordinates: {e}")
        return None

@dp.message(lambda message: not message.text.startswith('/'))
async def get_weather(message: Message):
    """Get current weather for the specified city."""
    if message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await help_command(message)
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
        result = await get_city_coordinates(message.text)
        if not result:
            await message.answer(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n"
                "2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º\n"
                "3. –£–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏"
            )
            return
            
        lat, lon, normalized_city = result
        
        # Get weather data
        weather_url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        async with aiohttp.ClientSession() as session:
            async with session.get(weather_url) as response:
                weather_data = await response.json()
        
        # Check for weather alerts
        alerts = check_weather_alerts(weather_data)
        
        # Format and send detailed weather information
        detailed_message = format_detailed_weather(weather_data, normalized_city)
        if alerts:
            detailed_message += "\n\n" + "\n".join(alerts)
        await message.answer(detailed_message)
        
    except Exception as e:
        logging.error(f"Error getting weather: {e}")
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def process_update(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
    data = await request.json()
    update = types.Update(**data)
    await dp.feed_update(bot=bot, update=update)
    return web.Response()

async def healthcheck(request):
    """–ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    return web.Response(text="Bot is running")

async def shutdown(dispatcher: Dispatcher):
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    logging.info("Shutting down...")
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    if scheduler:
        scheduler.shutdown(wait=False)
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    await dispatcher.storage.close()
    await dispatcher.storage.wait_closed()
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
    session = await bot.get_session()
    if session:
        await session.close()
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if runner:
        await runner.cleanup()

async def on_shutdown(app):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logging.info("Stopping web application...")
    await shutdown(dp)

async def on_startup(app):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    webhook_path = f"/webhook/{TELEGRAM_BOT_TOKEN}"
    webhook_url = os.environ.get('RENDER_EXTERNAL_URL', 'http://localhost:8080') + webhook_path
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    await bot.set_webhook(
        url=webhook_url,
        drop_pending_updates=True
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    await bot.set_my_commands(COMMANDS)
    print(f"Webhook set to {webhook_url}")
    print("Bot commands updated successfully")

async def check_weather_conditions(city, lat, lon):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
    try:
        weather_url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        async with aiohttp.ClientSession() as session:
            async with session.get(weather_url) as response:
                weather_data = await response.json()
        
        warnings = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
        temp = weather_data['main']['temp']
        if temp > 30:
            warnings.append(f"üå° –°–∏–ª—å–Ω–∞—è –∂–∞—Ä–∞ –≤ {city}: {temp:.1f}¬∞C")
        elif temp < -15:
            warnings.append(f"‚ùÑÔ∏è –°–∏–ª—å–Ω—ã–π –º–æ—Ä–æ–∑ –≤ {city}: {temp:.1f}¬∞C")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–∞–¥–∫–∏
        if 'rain' in weather_data:
            rain = weather_data['rain'].get('1h', 0)
            if rain > 10:
                warnings.append(f"üåß –°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å –≤ {city}: {rain} –º–º/—á")
        if 'snow' in weather_data:
            snow = weather_data['snow'].get('1h', 0)
            if snow > 5:
                warnings.append(f"üå® –°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥ –≤ {city}: {snow} –º–º/—á")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ç–µ—Ä
        wind_speed = weather_data['wind']['speed']
        if wind_speed > 15:
            warnings.append(f"üí® –°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä –≤ {city}: {wind_speed} –º/—Å")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        for param in ['temp', 'humidity', 'pressure']:
            weather_stats[city][param].append(weather_data['main'][param])
            # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 –∑–Ω–∞—á–µ–Ω–∏—è
            weather_stats[city][param] = weather_stats[city][param][-24:]
        
        return warnings
        
    except Exception as e:
        logging.error(f"Error checking weather conditions: {e}")
        return []

async def send_weather_alerts():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    for user_id, subscriptions in weather_subscriptions.items():
        for city, lat, lon in subscriptions:
            warnings = await check_weather_conditions(city, lat, lon)
            if warnings:
                try:
                    await bot.send_message(
                        user_id,
                        "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ:\n" + "\n".join(warnings)
                    )
                except Exception as e:
                    logging.error(f"Error sending alert to user {user_id}: {e}")

async def find_nearby_shelters(lat, lon):
    """–ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Å—Ç–∞ —É–∫—Ä—ã—Ç–∏—è –æ—Ç –Ω–µ–ø–æ–≥–æ–¥—ã"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenStreetMap Nominatim API –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç
        search_url = (
            f"https://nominatim.openstreetmap.org/search"
            f"?format=json"
            f"&lat={lat}"
            f"&lon={lon}"
            f"&amenity=shelter,shopping_mall,library,cafe"
            f"&limit=5"
        )
        
        async with aiohttp.ClientSession() as session:
            async with session.get(search_url, headers={'User-Agent': 'WeatherBot/1.0'}) as response:
                places = await response.json()
        
        return places
    except Exception as e:
        logging.error(f"Error finding shelters: {e}")
        return []

@dp.message(Command('subscribe'))
async def subscribe_command(message: Message):
    """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ"""
    try:
        city = message.text.split(' ', 1)[1]
    except IndexError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /subscribe –ú–æ—Å–∫–≤–∞"
        )
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
        result = await get_city_coordinates(city)
        if not result:
            await message.answer(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
                "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n"
                "2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞–ø–∏—Å–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n"
                "3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—è:\n"
                "‚úÖ –°–∞—Ä–∞—Ç–æ–≤\n"
                "‚úÖ –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥\n"
                "‚úÖ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
            )
            return
            
        lat, lon, normalized_city = result
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        user_id = message.from_user.id
        if (normalized_city, lat, lon) not in weather_subscriptions[user_id]:
            weather_subscriptions[user_id].append((normalized_city, lat, lon))
            save_subscriptions()
            
            # –°—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            weather_url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
            async with aiohttp.ClientSession() as session:
                async with session.get(weather_url) as response:
                    weather_data = await response.json()
            
            await message.answer(
                f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –≤ –≥–æ—Ä–æ–¥–µ {normalized_city}\n\n"
                f"–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞:\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_data['main']['temp']:.1f}¬∞C\n"
                f"‚òÅÔ∏è {weather_data['weather'][0]['description']}"
            )
        else:
            await message.answer(f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –≤ –≥–æ—Ä–æ–¥–µ {normalized_city}")
        
    except Exception as e:
        logging.error(f"Error in subscribe_command: {e}")
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@dp.message(Command('unsubscribe'))
async def unsubscribe_command(message: Message):
    """–û—Ç–ø–∏—Å–∫–∞ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–≥–æ–¥–µ"""
    try:
        city = message.text.split(' ', 1)[1]
    except IndexError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /unsubscribe –ú–æ—Å–∫–≤–∞"
        )
        return

    try:
        user_id = message.from_user.id
        # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        for sub in weather_subscriptions[user_id][:]:
            if sub[0].lower() == city.lower():
                weather_subscriptions[user_id].remove(sub)
                save_subscriptions()
                await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–≥–æ–¥–µ –≤ –≥–æ—Ä–æ–¥–µ {city}")
                return
        
        await message.answer(f"–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –≤ –≥–æ—Ä–æ–¥–µ {city}")
        
    except Exception as e:
        logging.error(f"Error in unsubscribe_command: {e}")
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@dp.message(Command('stats'))
async def stats_command(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–≥–æ–¥—ã"""
    try:
        city = message.text.split(' ', 1)[1]
    except IndexError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /stats –ú–æ—Å–∫–≤–∞"
        )
        return

    try:
        if city not in weather_stats or not weather_stats[city]['temp']:
            await message.answer(
                f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city} –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. "
                "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—á–Ω–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = weather_stats[city]
        temp_avg = sum(stats['temp']) / len(stats['temp'])
        temp_min = min(stats['temp'])
        temp_max = max(stats['temp'])
        humidity_avg = sum(stats['humidity']) / len(stats['humidity'])
        
        message_text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–≥–æ–¥—ã –≤ –≥–æ—Ä–æ–¥–µ {city} (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞):\n\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:\n"
            f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è: {temp_avg:.1f}¬∞C\n"
            f"   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {temp_min:.1f}¬∞C\n"
            f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {temp_max:.1f}¬∞C\n"
            f"üíß –°—Ä–µ–¥–Ω—è—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity_avg:.1f}%"
        )
        
        await message.answer(message_text)
        
    except Exception as e:
        logging.error(f"Error in stats_command: {e}")
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@dp.message(Command('shelter'))
async def shelter_command(message: Message):
    """–ü–æ–∏—Å–∫ —É–∫—Ä—ã—Ç–∏—è –æ—Ç –Ω–µ–ø–æ–≥–æ–¥—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω–æ –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        try:
            city = message.text.split(' ', 1)[1]
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
            result = await get_city_coordinates(city)
            if not result:
                await message.answer(
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    "1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n"
                    "2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º\n"
                    "3. –£–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏\n\n"
                    "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üìç"
                )
                return
            lat, lon, normalized_city = result
        except IndexError:
            # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]
                ],
                resize_keyboard=True,
                one_time_keyboard=True
            )
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, "
                "–∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /shelter –ú–æ—Å–∫–≤–∞",
                reply_markup=keyboard
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —É–∫—Ä—ã—Ç–∏–π
        shelters = await find_nearby_shelters(lat, lon)
        
        if not shelters:
            await message.answer(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫—Ä—ã—Ç–∏—è –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–∫–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Ü–µ–Ω—Ç—Ä—ã –∏–ª–∏ –∫–∞—Ñ–µ –≤ —ç—Ç–æ–º —Ä–∞–π–æ–Ω–µ."
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫—Ä—ã—Ç–∏—è–º–∏
        message_text = f"üè™ –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Å—Ç–∞, –≥–¥–µ –º–æ–∂–Ω–æ —É–∫—Ä—ã—Ç—å—Å—è –æ—Ç –Ω–µ–ø–æ–≥–æ–¥—ã –≤ —Ä–∞–π–æ–Ω–µ {normalized_city if 'normalized_city' in locals() else '–≤–∞—à–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏'}:\n\n"
        
        for place in shelters:
            distance = ((float(place['lat']) - lat) ** 2 + (float(place['lon']) - lon) ** 2) ** 0.5 * 111  # –ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–º
            name = place['display_name'].split(',')[0]
            address = ', '.join(place['display_name'].split(',')[1:]).strip()
            
            message_text += (
                f"üìç {name}\n"
                f"   üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.1f} –∫–º\n"
                f"   üè† –ê–¥—Ä–µ—Å: {address}\n\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç—ã
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üó∫ –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ",
                            url=f"https://www.openstreetmap.org/?mlat={place['lat']}&mlon={place['lon']}&zoom=17"
                        )
                    ]
                ]
            )
        
        await message.answer(message_text, reply_markup=keyboard)
        
    except Exception as e:
        logging.error(f"Error in shelter_command: {e}")
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —É–∫—Ä—ã—Ç–∏–π. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def save_subscriptions():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ñ–∞–π–ª"""
    with open('weather_subscriptions.json', 'w', encoding='utf-8') as f:
        json.dump({str(k): v for k, v in weather_subscriptions.items()}, f, ensure_ascii=False)

def load_subscriptions():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    global weather_subscriptions
    try:
        if os.path.exists('weather_subscriptions.json'):
            with open('weather_subscriptions.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                weather_subscriptions = defaultdict(list, {int(k): v for k, v in data.items()})
    except Exception as e:
        logging.error(f"Error loading subscriptions: {e}")

def save_user_preferences():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    with open('user_preferences.json', 'w', encoding='utf-8') as f:
        json.dump({str(k): v for k, v in user_preferences.items()}, f, ensure_ascii=False)

def load_user_preferences():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    global user_preferences
    try:
        if os.path.exists('user_preferences.json'):
            with open('user_preferences.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                user_preferences.update({int(k): v for k, v in data.items()})
    except Exception as e:
        logging.error(f"Error loading user preferences: {e}")

async def check_weather_changes(city, lat, lon, prev_temp):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã"""
    try:
        weather_url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        async with aiohttp.ClientSession() as session:
            async with session.get(weather_url) as response:
                weather_data = await response.json()
        
        curr_temp = weather_data['main']['temp']
        temp_change = abs(curr_temp - prev_temp)
        
        if temp_change >= 5:  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ 5¬∞C –∏–ª–∏ –±–æ–ª–µ–µ
            return f"üå° –†–µ–∑–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ {city}: {temp_change:.1f}¬∞C"
        return None
        
    except Exception as e:
        logging.error(f"Error checking weather changes: {e}")
        return None

async def check_activity_conditions(city, lat, lon, activities):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"""
    try:
        weather_url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        async with aiohttp.ClientSession() as session:
            async with session.get(weather_url) as response:
                weather_data = await response.json()
        
        temp = weather_data['main']['temp']
        wind_speed = weather_data['wind']['speed']
        is_rain = 'rain' in weather_data
        
        suitable_activities = []
        
        for activity in activities:
            if activity not in ACTIVITIES:
                continue
                
            conditions = ACTIVITIES[activity]
            temp_min, temp_max = conditions['temp_range']
            
            if (temp_min <= temp <= temp_max and
                wind_speed <= conditions['wind_max'] and
                (not conditions['no_rain'] or not is_rain)):
                suitable_activities.append(conditions['description'])
        
        if suitable_activities:
            return f"üéØ –û—Ç–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –≤ {city} –¥–ª—è: {', '.join(suitable_activities)}!"
        return None
        
    except Exception as e:
        logging.error(f"Error checking activity conditions: {e}")
        return None

async def send_smart_notifications():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    current_hour = datetime.now().strftime('%H:00')
    
    for user_id, prefs in user_preferences.items():
        if prefs['notification_time'] != current_hour:
            continue
            
        try:
            for city, lat, lon in weather_subscriptions[user_id]:
                notifications = []
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
                if prefs['activities']:
                    activity_notice = await check_activity_conditions(city, lat, lon, prefs['activities'])
                    if activity_notice:
                        notifications.append(activity_notice)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É
                weather_url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
                async with aiohttp.ClientSession() as session:
                    async with session.get(weather_url) as response:
                        weather_data = await response.json()
                
                temp = weather_data['main']['temp']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
                if not (prefs['temp_range']['min'] <= temp <= prefs['temp_range']['max']):
                    notifications.append(
                        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ {city} ({temp:.1f}¬∞C) –≤–Ω–µ –≤–∞—à–µ–≥–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ "
                        f"({prefs['temp_range']['min']}¬∞C - {prefs['temp_range']['max']}¬∞C)"
                    )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ç–µ—Ä
                wind_speed = weather_data['wind']['speed']
                if wind_speed > prefs['wind_threshold']:
                    notifications.append(f"üí® –°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä –≤ {city}: {wind_speed} –º/—Å")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∂–¥—å
                if prefs['rain_alerts'] and 'rain' in weather_data:
                    rain = weather_data['rain'].get('1h', 0)
                    if rain > 0:
                        notifications.append(f"üåß –û–∂–∏–¥–∞–µ—Ç—Å—è –¥–æ–∂–¥—å –≤ {city}: {rain} –º–º/—á")
                
                if notifications:
                    await bot.send_message(
                        user_id,
                        "üîî –£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n\n" + "\n\n".join(notifications)
                    )
                    
        except Exception as e:
            logging.error(f"Error sending smart notifications to user {user_id}: {e}")

@dp.message(Command('preferences'))
async def preferences_command(message: Message):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω",
                    callback_data="set_temp_range"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üåß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–∂–¥–µ",
                    callback_data="toggle_rain"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üí® –ü–æ—Ä–æ–≥ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ—Ç—Ä–∞",
                    callback_data="set_wind"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ö°Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö",
                    callback_data="toggle_changes"
                )
            ]
        ]
    )
    
    prefs = user_preferences[user_id]
    await message.answer(
        f"‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n"
        f"üå° –ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {prefs['temp_range']['min']}¬∞C - {prefs['temp_range']['max']}¬∞C\n"
        f"üåß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–∂–¥–µ: {'–í–∫–ª—é—á–µ–Ω—ã' if prefs['rain_alerts'] else '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n"
        f"üí® –ü–æ—Ä–æ–≥ –≤–µ—Ç—Ä–∞: {prefs['wind_threshold']} –º/—Å\n"
        f"‚ö°Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö: {'–í–∫–ª—é—á–µ–Ω—ã' if prefs['notify_changes'] else '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n"
        f"‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {prefs['notification_time']}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=keyboard
    )

@dp.message(Command('activities'))
async def activities_command(message: Message):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üèÉ‚Äç‚ôÇÔ∏è –ë–µ–≥",
                    callback_data="toggle_activity_running"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üö¥‚Äç‚ôÇÔ∏è –í–µ–ª–æ–ø—Ä–æ–≥—É–ª–∫–∏",
                    callback_data="toggle_activity_cycling"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üö∂‚Äç‚ôÇÔ∏è –ü—Ä–æ–≥—É–ª–∫–∏",
                    callback_data="toggle_activity_walking"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üß∫ –ü–∏–∫–Ω–∏–∫",
                    callback_data="toggle_activity_picnic"
                )
            ]
        ]
    )
    
    user_id = message.from_user.id
    current_activities = user_preferences[user_id]['activities']
    
    activities_text = "–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"
    if current_activities:
        activities_text = "\n".join(f"‚Ä¢ {ACTIVITIES[act]['description']}" for act in current_activities)
    
    await message.answer(
        f"üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –∏ —è –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å "
        f"–≤–∞—Å –∫–æ–≥–¥–∞ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –±—É–¥—É—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏.\n\n"
        f"–¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n{activities_text}",
        reply_markup=keyboard
    )

@dp.message(Command('notifytime'))
async def notifytime_command(message: Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        time_str = message.text.split(' ', 1)[1]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        try:
            hour = int(time_str.split(':')[0])
            if not (0 <= hour <= 23):
                raise ValueError
            new_time = f"{hour:02d}:00"
        except:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:00\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /notifytime 09:00"
            )
            return
        
        user_id = message.from_user.id
        user_preferences[user_id]['notification_time'] = new_time
        save_user_preferences()
        
        await message.answer(f"‚úÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_time}")
        
    except IndexError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /notifytime 09:00"
        )

@dp.callback_query(lambda c: c.data.startswith('toggle_activity_'))
async def process_activity_toggle(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"""
    activity = callback_query.data.replace('toggle_activity_', '')
    user_id = callback_query.from_user.id
    
    if activity in user_preferences[user_id]['activities']:
        user_preferences[user_id]['activities'].remove(activity)
        status = '—É–¥–∞–ª–µ–Ω–∞ –∏–∑'
    else:
        user_preferences[user_id]['activities'].append(activity)
        status = '–¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤'
    
    save_user_preferences()
    
    await callback_query.answer(
        f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å {ACTIVITIES[activity]['description']} {status} —Å–ø–∏—Å–æ–∫"
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º —Å–ø–∏—Å–∫–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
    current_activities = user_preferences[user_id]['activities']
    activities_text = "–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"
    if current_activities:
        activities_text = "\n".join(f"‚Ä¢ {ACTIVITIES[act]['description']}" for act in current_activities)
    
    await callback_query.message.edit_text(
        f"üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –∏ —è –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å "
        f"–≤–∞—Å –∫–æ–≥–¥–∞ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –±—É–¥—É—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏.\n\n"
        f"–¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n{activities_text}",
        reply_markup=callback_query.message.reply_markup
    )

async def main():
    """Start the bot."""
    global scheduler, app, runner
    
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        load_subscriptions()
        load_user_preferences()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler = AsyncIOScheduler()
        scheduler.add_job(send_weather_alerts, 'interval', minutes=30)
        scheduler.add_job(send_smart_notifications, 'interval', minutes=60)
        scheduler.start()
        
        # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = web.Application()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        webhook_path = f"/webhook/{TELEGRAM_BOT_TOKEN}"
        app.router.add_post(webhook_path, process_update)
        app.router.add_get("/", healthcheck)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app.on_startup.append(on_startup)
        app.on_shutdown.append(on_shutdown)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        port = int(os.environ.get('PORT', 8080))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', port)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        for signal_name in ('SIGINT', 'SIGTERM'):
            try:
                signal.signal(
                    getattr(signal, signal_name),
                    lambda s, f: asyncio.create_task(shutdown(dp))
                )
            except AttributeError:
                pass
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await site.start()
        logging.info(f"Bot started on port {port}")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await asyncio.Event().wait()
        
    except Exception as e:
        logging.error(f"Critical error in main: {e}", exc_info=True)
        if runner:
            await runner.cleanup()
        sys.exit(1)

# –û–±–Ω–æ–≤–∏–º —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞
if __name__ == '__main__':
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        with suppress(KeyboardInterrupt, SystemExit):
            loop.run_until_complete(main())
    except Exception as e:
        logging.error(f"Fatal error: {e}", exc_info=True)
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º loop
        loop.run_until_complete(loop.shutdown_asyncgens())
        loop.close()
        logging.info("Bot stopped")